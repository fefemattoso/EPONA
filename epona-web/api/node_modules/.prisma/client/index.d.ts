
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Atividade
 * 
 */
export type Atividade = $Result.DefaultSelection<Prisma.$AtividadePayload>
/**
 * Model Listas
 * 
 */
export type Listas = $Result.DefaultSelection<Prisma.$ListasPayload>
/**
 * Model Notas
 * 
 */
export type Notas = $Result.DefaultSelection<Prisma.$NotasPayload>
/**
 * Model ItemLista
 * 
 */
export type ItemLista = $Result.DefaultSelection<Prisma.$ItemListaPayload>
/**
 * Model Agenda
 * 
 */
export type Agenda = $Result.DefaultSelection<Prisma.$AgendaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.atividade`: Exposes CRUD operations for the **Atividade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Atividades
    * const atividades = await prisma.atividade.findMany()
    * ```
    */
  get atividade(): Prisma.AtividadeDelegate<ExtArgs>;

  /**
   * `prisma.listas`: Exposes CRUD operations for the **Listas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Listas
    * const listas = await prisma.listas.findMany()
    * ```
    */
  get listas(): Prisma.ListasDelegate<ExtArgs>;

  /**
   * `prisma.notas`: Exposes CRUD operations for the **Notas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notas
    * const notas = await prisma.notas.findMany()
    * ```
    */
  get notas(): Prisma.NotasDelegate<ExtArgs>;

  /**
   * `prisma.itemLista`: Exposes CRUD operations for the **ItemLista** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ItemListas
    * const itemListas = await prisma.itemLista.findMany()
    * ```
    */
  get itemLista(): Prisma.ItemListaDelegate<ExtArgs>;

  /**
   * `prisma.agenda`: Exposes CRUD operations for the **Agenda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agenda
    * const agenda = await prisma.agenda.findMany()
    * ```
    */
  get agenda(): Prisma.AgendaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Atividade: 'Atividade',
    Listas: 'Listas',
    Notas: 'Notas',
    ItemLista: 'ItemLista',
    Agenda: 'Agenda'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "atividade" | "listas" | "notas" | "itemLista" | "agenda"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Atividade: {
        payload: Prisma.$AtividadePayload<ExtArgs>
        fields: Prisma.AtividadeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AtividadeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtividadePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AtividadeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtividadePayload>
          }
          findFirst: {
            args: Prisma.AtividadeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtividadePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AtividadeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtividadePayload>
          }
          findMany: {
            args: Prisma.AtividadeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtividadePayload>[]
          }
          create: {
            args: Prisma.AtividadeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtividadePayload>
          }
          createMany: {
            args: Prisma.AtividadeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AtividadeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtividadePayload>
          }
          update: {
            args: Prisma.AtividadeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtividadePayload>
          }
          deleteMany: {
            args: Prisma.AtividadeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AtividadeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AtividadeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtividadePayload>
          }
          aggregate: {
            args: Prisma.AtividadeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAtividade>
          }
          groupBy: {
            args: Prisma.AtividadeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AtividadeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AtividadeCountArgs<ExtArgs>
            result: $Utils.Optional<AtividadeCountAggregateOutputType> | number
          }
        }
      }
      Listas: {
        payload: Prisma.$ListasPayload<ExtArgs>
        fields: Prisma.ListasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListasPayload>
          }
          findFirst: {
            args: Prisma.ListasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListasPayload>
          }
          findMany: {
            args: Prisma.ListasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListasPayload>[]
          }
          create: {
            args: Prisma.ListasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListasPayload>
          }
          createMany: {
            args: Prisma.ListasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ListasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListasPayload>
          }
          update: {
            args: Prisma.ListasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListasPayload>
          }
          deleteMany: {
            args: Prisma.ListasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ListasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ListasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListasPayload>
          }
          aggregate: {
            args: Prisma.ListasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateListas>
          }
          groupBy: {
            args: Prisma.ListasGroupByArgs<ExtArgs>
            result: $Utils.Optional<ListasGroupByOutputType>[]
          }
          count: {
            args: Prisma.ListasCountArgs<ExtArgs>
            result: $Utils.Optional<ListasCountAggregateOutputType> | number
          }
        }
      }
      Notas: {
        payload: Prisma.$NotasPayload<ExtArgs>
        fields: Prisma.NotasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotasPayload>
          }
          findFirst: {
            args: Prisma.NotasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotasPayload>
          }
          findMany: {
            args: Prisma.NotasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotasPayload>[]
          }
          create: {
            args: Prisma.NotasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotasPayload>
          }
          createMany: {
            args: Prisma.NotasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotasPayload>
          }
          update: {
            args: Prisma.NotasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotasPayload>
          }
          deleteMany: {
            args: Prisma.NotasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotasPayload>
          }
          aggregate: {
            args: Prisma.NotasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotas>
          }
          groupBy: {
            args: Prisma.NotasGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotasGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotasCountArgs<ExtArgs>
            result: $Utils.Optional<NotasCountAggregateOutputType> | number
          }
        }
      }
      ItemLista: {
        payload: Prisma.$ItemListaPayload<ExtArgs>
        fields: Prisma.ItemListaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemListaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemListaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemListaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemListaPayload>
          }
          findFirst: {
            args: Prisma.ItemListaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemListaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemListaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemListaPayload>
          }
          findMany: {
            args: Prisma.ItemListaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemListaPayload>[]
          }
          create: {
            args: Prisma.ItemListaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemListaPayload>
          }
          createMany: {
            args: Prisma.ItemListaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ItemListaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemListaPayload>
          }
          update: {
            args: Prisma.ItemListaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemListaPayload>
          }
          deleteMany: {
            args: Prisma.ItemListaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemListaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemListaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemListaPayload>
          }
          aggregate: {
            args: Prisma.ItemListaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItemLista>
          }
          groupBy: {
            args: Prisma.ItemListaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemListaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemListaCountArgs<ExtArgs>
            result: $Utils.Optional<ItemListaCountAggregateOutputType> | number
          }
        }
      }
      Agenda: {
        payload: Prisma.$AgendaPayload<ExtArgs>
        fields: Prisma.AgendaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgendaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgendaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          findFirst: {
            args: Prisma.AgendaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgendaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          findMany: {
            args: Prisma.AgendaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>[]
          }
          create: {
            args: Prisma.AgendaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          createMany: {
            args: Prisma.AgendaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AgendaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          update: {
            args: Prisma.AgendaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          deleteMany: {
            args: Prisma.AgendaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgendaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgendaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaPayload>
          }
          aggregate: {
            args: Prisma.AgendaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgenda>
          }
          groupBy: {
            args: Prisma.AgendaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgendaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgendaCountArgs<ExtArgs>
            result: $Utils.Optional<AgendaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    itenslista: number
    lista: number
    agenda: number
    atividade: number
    notas: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    itenslista?: boolean | UsuarioCountOutputTypeCountItenslistaArgs
    lista?: boolean | UsuarioCountOutputTypeCountListaArgs
    agenda?: boolean | UsuarioCountOutputTypeCountAgendaArgs
    atividade?: boolean | UsuarioCountOutputTypeCountAtividadeArgs
    notas?: boolean | UsuarioCountOutputTypeCountNotasArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountItenslistaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemListaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountListaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListasWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountAgendaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountAtividadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AtividadeWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountNotasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotasWhereInput
  }


  /**
   * Count Type ListasCountOutputType
   */

  export type ListasCountOutputType = {
    itens: number
  }

  export type ListasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    itens?: boolean | ListasCountOutputTypeCountItensArgs
  }

  // Custom InputTypes
  /**
   * ListasCountOutputType without action
   */
  export type ListasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListasCountOutputType
     */
    select?: ListasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ListasCountOutputType without action
   */
  export type ListasCountOutputTypeCountItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemListaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    pontuacao: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    pontuacao: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    nascimento: Date | null
    pontuacao: number | null
    criadoEm: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    nascimento: Date | null
    pontuacao: number | null
    criadoEm: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    nascimento: number
    pontuacao: number
    criadoEm: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    pontuacao?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    pontuacao?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    nascimento?: true
    pontuacao?: true
    criadoEm?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    nascimento?: true
    pontuacao?: true
    criadoEm?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    nascimento?: true
    pontuacao?: true
    criadoEm?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    nascimento: Date
    pontuacao: number
    criadoEm: Date | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    nascimento?: boolean
    pontuacao?: boolean
    criadoEm?: boolean
    itenslista?: boolean | Usuario$itenslistaArgs<ExtArgs>
    lista?: boolean | Usuario$listaArgs<ExtArgs>
    agenda?: boolean | Usuario$agendaArgs<ExtArgs>
    atividade?: boolean | Usuario$atividadeArgs<ExtArgs>
    notas?: boolean | Usuario$notasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>


  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    nascimento?: boolean
    pontuacao?: boolean
    criadoEm?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    itenslista?: boolean | Usuario$itenslistaArgs<ExtArgs>
    lista?: boolean | Usuario$listaArgs<ExtArgs>
    agenda?: boolean | Usuario$agendaArgs<ExtArgs>
    atividade?: boolean | Usuario$atividadeArgs<ExtArgs>
    notas?: boolean | Usuario$notasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      itenslista: Prisma.$ItemListaPayload<ExtArgs>[]
      lista: Prisma.$ListasPayload<ExtArgs>[]
      agenda: Prisma.$AgendaPayload<ExtArgs>[]
      atividade: Prisma.$AtividadePayload<ExtArgs>[]
      notas: Prisma.$NotasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      nascimento: Date
      pontuacao: number
      criadoEm: Date | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    itenslista<T extends Usuario$itenslistaArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$itenslistaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "findMany"> | Null>
    lista<T extends Usuario$listaArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$listaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "findMany"> | Null>
    agenda<T extends Usuario$agendaArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$agendaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findMany"> | Null>
    atividade<T extends Usuario$atividadeArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$atividadeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "findMany"> | Null>
    notas<T extends Usuario$notasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$notasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly nascimento: FieldRef<"Usuario", 'DateTime'>
    readonly pontuacao: FieldRef<"Usuario", 'Int'>
    readonly criadoEm: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.itenslista
   */
  export type Usuario$itenslistaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    where?: ItemListaWhereInput
    orderBy?: ItemListaOrderByWithRelationInput | ItemListaOrderByWithRelationInput[]
    cursor?: ItemListaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemListaScalarFieldEnum | ItemListaScalarFieldEnum[]
  }

  /**
   * Usuario.lista
   */
  export type Usuario$listaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    where?: ListasWhereInput
    orderBy?: ListasOrderByWithRelationInput | ListasOrderByWithRelationInput[]
    cursor?: ListasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListasScalarFieldEnum | ListasScalarFieldEnum[]
  }

  /**
   * Usuario.agenda
   */
  export type Usuario$agendaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    where?: AgendaWhereInput
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    cursor?: AgendaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendaScalarFieldEnum | AgendaScalarFieldEnum[]
  }

  /**
   * Usuario.atividade
   */
  export type Usuario$atividadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    where?: AtividadeWhereInput
    orderBy?: AtividadeOrderByWithRelationInput | AtividadeOrderByWithRelationInput[]
    cursor?: AtividadeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AtividadeScalarFieldEnum | AtividadeScalarFieldEnum[]
  }

  /**
   * Usuario.notas
   */
  export type Usuario$notasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    where?: NotasWhereInput
    orderBy?: NotasOrderByWithRelationInput | NotasOrderByWithRelationInput[]
    cursor?: NotasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotasScalarFieldEnum | NotasScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Atividade
   */

  export type AggregateAtividade = {
    _count: AtividadeCountAggregateOutputType | null
    _avg: AtividadeAvgAggregateOutputType | null
    _sum: AtividadeSumAggregateOutputType | null
    _min: AtividadeMinAggregateOutputType | null
    _max: AtividadeMaxAggregateOutputType | null
  }

  export type AtividadeAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type AtividadeSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type AtividadeMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    descricao: string | null
    usuarioId: number | null
    data: Date | null
    concluido: boolean | null
  }

  export type AtividadeMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    descricao: string | null
    usuarioId: number | null
    data: Date | null
    concluido: boolean | null
  }

  export type AtividadeCountAggregateOutputType = {
    id: number
    titulo: number
    descricao: number
    usuarioId: number
    data: number
    concluido: number
    _all: number
  }


  export type AtividadeAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type AtividadeSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type AtividadeMinAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    usuarioId?: true
    data?: true
    concluido?: true
  }

  export type AtividadeMaxAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    usuarioId?: true
    data?: true
    concluido?: true
  }

  export type AtividadeCountAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    usuarioId?: true
    data?: true
    concluido?: true
    _all?: true
  }

  export type AtividadeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Atividade to aggregate.
     */
    where?: AtividadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Atividades to fetch.
     */
    orderBy?: AtividadeOrderByWithRelationInput | AtividadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AtividadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Atividades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Atividades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Atividades
    **/
    _count?: true | AtividadeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AtividadeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AtividadeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AtividadeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AtividadeMaxAggregateInputType
  }

  export type GetAtividadeAggregateType<T extends AtividadeAggregateArgs> = {
        [P in keyof T & keyof AggregateAtividade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAtividade[P]>
      : GetScalarType<T[P], AggregateAtividade[P]>
  }




  export type AtividadeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AtividadeWhereInput
    orderBy?: AtividadeOrderByWithAggregationInput | AtividadeOrderByWithAggregationInput[]
    by: AtividadeScalarFieldEnum[] | AtividadeScalarFieldEnum
    having?: AtividadeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AtividadeCountAggregateInputType | true
    _avg?: AtividadeAvgAggregateInputType
    _sum?: AtividadeSumAggregateInputType
    _min?: AtividadeMinAggregateInputType
    _max?: AtividadeMaxAggregateInputType
  }

  export type AtividadeGroupByOutputType = {
    id: number
    titulo: string
    descricao: string | null
    usuarioId: number
    data: Date | null
    concluido: boolean
    _count: AtividadeCountAggregateOutputType | null
    _avg: AtividadeAvgAggregateOutputType | null
    _sum: AtividadeSumAggregateOutputType | null
    _min: AtividadeMinAggregateOutputType | null
    _max: AtividadeMaxAggregateOutputType | null
  }

  type GetAtividadeGroupByPayload<T extends AtividadeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AtividadeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AtividadeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AtividadeGroupByOutputType[P]>
            : GetScalarType<T[P], AtividadeGroupByOutputType[P]>
        }
      >
    >


  export type AtividadeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    usuarioId?: boolean
    data?: boolean
    concluido?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["atividade"]>


  export type AtividadeSelectScalar = {
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    usuarioId?: boolean
    data?: boolean
    concluido?: boolean
  }

  export type AtividadeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $AtividadePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Atividade"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      descricao: string | null
      usuarioId: number
      data: Date | null
      concluido: boolean
    }, ExtArgs["result"]["atividade"]>
    composites: {}
  }

  type AtividadeGetPayload<S extends boolean | null | undefined | AtividadeDefaultArgs> = $Result.GetResult<Prisma.$AtividadePayload, S>

  type AtividadeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AtividadeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AtividadeCountAggregateInputType | true
    }

  export interface AtividadeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Atividade'], meta: { name: 'Atividade' } }
    /**
     * Find zero or one Atividade that matches the filter.
     * @param {AtividadeFindUniqueArgs} args - Arguments to find a Atividade
     * @example
     * // Get one Atividade
     * const atividade = await prisma.atividade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AtividadeFindUniqueArgs>(args: SelectSubset<T, AtividadeFindUniqueArgs<ExtArgs>>): Prisma__AtividadeClient<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Atividade that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AtividadeFindUniqueOrThrowArgs} args - Arguments to find a Atividade
     * @example
     * // Get one Atividade
     * const atividade = await prisma.atividade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AtividadeFindUniqueOrThrowArgs>(args: SelectSubset<T, AtividadeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AtividadeClient<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Atividade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtividadeFindFirstArgs} args - Arguments to find a Atividade
     * @example
     * // Get one Atividade
     * const atividade = await prisma.atividade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AtividadeFindFirstArgs>(args?: SelectSubset<T, AtividadeFindFirstArgs<ExtArgs>>): Prisma__AtividadeClient<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Atividade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtividadeFindFirstOrThrowArgs} args - Arguments to find a Atividade
     * @example
     * // Get one Atividade
     * const atividade = await prisma.atividade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AtividadeFindFirstOrThrowArgs>(args?: SelectSubset<T, AtividadeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AtividadeClient<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Atividades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtividadeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Atividades
     * const atividades = await prisma.atividade.findMany()
     * 
     * // Get first 10 Atividades
     * const atividades = await prisma.atividade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const atividadeWithIdOnly = await prisma.atividade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AtividadeFindManyArgs>(args?: SelectSubset<T, AtividadeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Atividade.
     * @param {AtividadeCreateArgs} args - Arguments to create a Atividade.
     * @example
     * // Create one Atividade
     * const Atividade = await prisma.atividade.create({
     *   data: {
     *     // ... data to create a Atividade
     *   }
     * })
     * 
     */
    create<T extends AtividadeCreateArgs>(args: SelectSubset<T, AtividadeCreateArgs<ExtArgs>>): Prisma__AtividadeClient<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Atividades.
     * @param {AtividadeCreateManyArgs} args - Arguments to create many Atividades.
     * @example
     * // Create many Atividades
     * const atividade = await prisma.atividade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AtividadeCreateManyArgs>(args?: SelectSubset<T, AtividadeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Atividade.
     * @param {AtividadeDeleteArgs} args - Arguments to delete one Atividade.
     * @example
     * // Delete one Atividade
     * const Atividade = await prisma.atividade.delete({
     *   where: {
     *     // ... filter to delete one Atividade
     *   }
     * })
     * 
     */
    delete<T extends AtividadeDeleteArgs>(args: SelectSubset<T, AtividadeDeleteArgs<ExtArgs>>): Prisma__AtividadeClient<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Atividade.
     * @param {AtividadeUpdateArgs} args - Arguments to update one Atividade.
     * @example
     * // Update one Atividade
     * const atividade = await prisma.atividade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AtividadeUpdateArgs>(args: SelectSubset<T, AtividadeUpdateArgs<ExtArgs>>): Prisma__AtividadeClient<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Atividades.
     * @param {AtividadeDeleteManyArgs} args - Arguments to filter Atividades to delete.
     * @example
     * // Delete a few Atividades
     * const { count } = await prisma.atividade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AtividadeDeleteManyArgs>(args?: SelectSubset<T, AtividadeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Atividades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtividadeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Atividades
     * const atividade = await prisma.atividade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AtividadeUpdateManyArgs>(args: SelectSubset<T, AtividadeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Atividade.
     * @param {AtividadeUpsertArgs} args - Arguments to update or create a Atividade.
     * @example
     * // Update or create a Atividade
     * const atividade = await prisma.atividade.upsert({
     *   create: {
     *     // ... data to create a Atividade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Atividade we want to update
     *   }
     * })
     */
    upsert<T extends AtividadeUpsertArgs>(args: SelectSubset<T, AtividadeUpsertArgs<ExtArgs>>): Prisma__AtividadeClient<$Result.GetResult<Prisma.$AtividadePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Atividades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtividadeCountArgs} args - Arguments to filter Atividades to count.
     * @example
     * // Count the number of Atividades
     * const count = await prisma.atividade.count({
     *   where: {
     *     // ... the filter for the Atividades we want to count
     *   }
     * })
    **/
    count<T extends AtividadeCountArgs>(
      args?: Subset<T, AtividadeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AtividadeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Atividade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtividadeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AtividadeAggregateArgs>(args: Subset<T, AtividadeAggregateArgs>): Prisma.PrismaPromise<GetAtividadeAggregateType<T>>

    /**
     * Group by Atividade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtividadeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AtividadeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AtividadeGroupByArgs['orderBy'] }
        : { orderBy?: AtividadeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AtividadeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAtividadeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Atividade model
   */
  readonly fields: AtividadeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Atividade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AtividadeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Atividade model
   */ 
  interface AtividadeFieldRefs {
    readonly id: FieldRef<"Atividade", 'Int'>
    readonly titulo: FieldRef<"Atividade", 'String'>
    readonly descricao: FieldRef<"Atividade", 'String'>
    readonly usuarioId: FieldRef<"Atividade", 'Int'>
    readonly data: FieldRef<"Atividade", 'DateTime'>
    readonly concluido: FieldRef<"Atividade", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Atividade findUnique
   */
  export type AtividadeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    /**
     * Filter, which Atividade to fetch.
     */
    where: AtividadeWhereUniqueInput
  }

  /**
   * Atividade findUniqueOrThrow
   */
  export type AtividadeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    /**
     * Filter, which Atividade to fetch.
     */
    where: AtividadeWhereUniqueInput
  }

  /**
   * Atividade findFirst
   */
  export type AtividadeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    /**
     * Filter, which Atividade to fetch.
     */
    where?: AtividadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Atividades to fetch.
     */
    orderBy?: AtividadeOrderByWithRelationInput | AtividadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Atividades.
     */
    cursor?: AtividadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Atividades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Atividades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Atividades.
     */
    distinct?: AtividadeScalarFieldEnum | AtividadeScalarFieldEnum[]
  }

  /**
   * Atividade findFirstOrThrow
   */
  export type AtividadeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    /**
     * Filter, which Atividade to fetch.
     */
    where?: AtividadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Atividades to fetch.
     */
    orderBy?: AtividadeOrderByWithRelationInput | AtividadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Atividades.
     */
    cursor?: AtividadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Atividades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Atividades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Atividades.
     */
    distinct?: AtividadeScalarFieldEnum | AtividadeScalarFieldEnum[]
  }

  /**
   * Atividade findMany
   */
  export type AtividadeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    /**
     * Filter, which Atividades to fetch.
     */
    where?: AtividadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Atividades to fetch.
     */
    orderBy?: AtividadeOrderByWithRelationInput | AtividadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Atividades.
     */
    cursor?: AtividadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Atividades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Atividades.
     */
    skip?: number
    distinct?: AtividadeScalarFieldEnum | AtividadeScalarFieldEnum[]
  }

  /**
   * Atividade create
   */
  export type AtividadeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    /**
     * The data needed to create a Atividade.
     */
    data: XOR<AtividadeCreateInput, AtividadeUncheckedCreateInput>
  }

  /**
   * Atividade createMany
   */
  export type AtividadeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Atividades.
     */
    data: AtividadeCreateManyInput | AtividadeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Atividade update
   */
  export type AtividadeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    /**
     * The data needed to update a Atividade.
     */
    data: XOR<AtividadeUpdateInput, AtividadeUncheckedUpdateInput>
    /**
     * Choose, which Atividade to update.
     */
    where: AtividadeWhereUniqueInput
  }

  /**
   * Atividade updateMany
   */
  export type AtividadeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Atividades.
     */
    data: XOR<AtividadeUpdateManyMutationInput, AtividadeUncheckedUpdateManyInput>
    /**
     * Filter which Atividades to update
     */
    where?: AtividadeWhereInput
  }

  /**
   * Atividade upsert
   */
  export type AtividadeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    /**
     * The filter to search for the Atividade to update in case it exists.
     */
    where: AtividadeWhereUniqueInput
    /**
     * In case the Atividade found by the `where` argument doesn't exist, create a new Atividade with this data.
     */
    create: XOR<AtividadeCreateInput, AtividadeUncheckedCreateInput>
    /**
     * In case the Atividade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AtividadeUpdateInput, AtividadeUncheckedUpdateInput>
  }

  /**
   * Atividade delete
   */
  export type AtividadeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
    /**
     * Filter which Atividade to delete.
     */
    where: AtividadeWhereUniqueInput
  }

  /**
   * Atividade deleteMany
   */
  export type AtividadeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Atividades to delete
     */
    where?: AtividadeWhereInput
  }

  /**
   * Atividade without action
   */
  export type AtividadeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atividade
     */
    select?: AtividadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AtividadeInclude<ExtArgs> | null
  }


  /**
   * Model Listas
   */

  export type AggregateListas = {
    _count: ListasCountAggregateOutputType | null
    _avg: ListasAvgAggregateOutputType | null
    _sum: ListasSumAggregateOutputType | null
    _min: ListasMinAggregateOutputType | null
    _max: ListasMaxAggregateOutputType | null
  }

  export type ListasAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type ListasSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type ListasMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    usuarioId: number | null
  }

  export type ListasMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    usuarioId: number | null
  }

  export type ListasCountAggregateOutputType = {
    id: number
    titulo: number
    usuarioId: number
    _all: number
  }


  export type ListasAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type ListasSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type ListasMinAggregateInputType = {
    id?: true
    titulo?: true
    usuarioId?: true
  }

  export type ListasMaxAggregateInputType = {
    id?: true
    titulo?: true
    usuarioId?: true
  }

  export type ListasCountAggregateInputType = {
    id?: true
    titulo?: true
    usuarioId?: true
    _all?: true
  }

  export type ListasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Listas to aggregate.
     */
    where?: ListasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listas to fetch.
     */
    orderBy?: ListasOrderByWithRelationInput | ListasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Listas
    **/
    _count?: true | ListasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListasMaxAggregateInputType
  }

  export type GetListasAggregateType<T extends ListasAggregateArgs> = {
        [P in keyof T & keyof AggregateListas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateListas[P]>
      : GetScalarType<T[P], AggregateListas[P]>
  }




  export type ListasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListasWhereInput
    orderBy?: ListasOrderByWithAggregationInput | ListasOrderByWithAggregationInput[]
    by: ListasScalarFieldEnum[] | ListasScalarFieldEnum
    having?: ListasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListasCountAggregateInputType | true
    _avg?: ListasAvgAggregateInputType
    _sum?: ListasSumAggregateInputType
    _min?: ListasMinAggregateInputType
    _max?: ListasMaxAggregateInputType
  }

  export type ListasGroupByOutputType = {
    id: number
    titulo: string
    usuarioId: number
    _count: ListasCountAggregateOutputType | null
    _avg: ListasAvgAggregateOutputType | null
    _sum: ListasSumAggregateOutputType | null
    _min: ListasMinAggregateOutputType | null
    _max: ListasMaxAggregateOutputType | null
  }

  type GetListasGroupByPayload<T extends ListasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListasGroupByOutputType[P]>
            : GetScalarType<T[P], ListasGroupByOutputType[P]>
        }
      >
    >


  export type ListasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    itens?: boolean | Listas$itensArgs<ExtArgs>
    _count?: boolean | ListasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listas"]>


  export type ListasSelectScalar = {
    id?: boolean
    titulo?: boolean
    usuarioId?: boolean
  }

  export type ListasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    itens?: boolean | Listas$itensArgs<ExtArgs>
    _count?: boolean | ListasCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ListasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Listas"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      itens: Prisma.$ItemListaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      usuarioId: number
    }, ExtArgs["result"]["listas"]>
    composites: {}
  }

  type ListasGetPayload<S extends boolean | null | undefined | ListasDefaultArgs> = $Result.GetResult<Prisma.$ListasPayload, S>

  type ListasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ListasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ListasCountAggregateInputType | true
    }

  export interface ListasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Listas'], meta: { name: 'Listas' } }
    /**
     * Find zero or one Listas that matches the filter.
     * @param {ListasFindUniqueArgs} args - Arguments to find a Listas
     * @example
     * // Get one Listas
     * const listas = await prisma.listas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ListasFindUniqueArgs>(args: SelectSubset<T, ListasFindUniqueArgs<ExtArgs>>): Prisma__ListasClient<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Listas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ListasFindUniqueOrThrowArgs} args - Arguments to find a Listas
     * @example
     * // Get one Listas
     * const listas = await prisma.listas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ListasFindUniqueOrThrowArgs>(args: SelectSubset<T, ListasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ListasClient<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Listas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListasFindFirstArgs} args - Arguments to find a Listas
     * @example
     * // Get one Listas
     * const listas = await prisma.listas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ListasFindFirstArgs>(args?: SelectSubset<T, ListasFindFirstArgs<ExtArgs>>): Prisma__ListasClient<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Listas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListasFindFirstOrThrowArgs} args - Arguments to find a Listas
     * @example
     * // Get one Listas
     * const listas = await prisma.listas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ListasFindFirstOrThrowArgs>(args?: SelectSubset<T, ListasFindFirstOrThrowArgs<ExtArgs>>): Prisma__ListasClient<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Listas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Listas
     * const listas = await prisma.listas.findMany()
     * 
     * // Get first 10 Listas
     * const listas = await prisma.listas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listasWithIdOnly = await prisma.listas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ListasFindManyArgs>(args?: SelectSubset<T, ListasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Listas.
     * @param {ListasCreateArgs} args - Arguments to create a Listas.
     * @example
     * // Create one Listas
     * const Listas = await prisma.listas.create({
     *   data: {
     *     // ... data to create a Listas
     *   }
     * })
     * 
     */
    create<T extends ListasCreateArgs>(args: SelectSubset<T, ListasCreateArgs<ExtArgs>>): Prisma__ListasClient<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Listas.
     * @param {ListasCreateManyArgs} args - Arguments to create many Listas.
     * @example
     * // Create many Listas
     * const listas = await prisma.listas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ListasCreateManyArgs>(args?: SelectSubset<T, ListasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Listas.
     * @param {ListasDeleteArgs} args - Arguments to delete one Listas.
     * @example
     * // Delete one Listas
     * const Listas = await prisma.listas.delete({
     *   where: {
     *     // ... filter to delete one Listas
     *   }
     * })
     * 
     */
    delete<T extends ListasDeleteArgs>(args: SelectSubset<T, ListasDeleteArgs<ExtArgs>>): Prisma__ListasClient<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Listas.
     * @param {ListasUpdateArgs} args - Arguments to update one Listas.
     * @example
     * // Update one Listas
     * const listas = await prisma.listas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ListasUpdateArgs>(args: SelectSubset<T, ListasUpdateArgs<ExtArgs>>): Prisma__ListasClient<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Listas.
     * @param {ListasDeleteManyArgs} args - Arguments to filter Listas to delete.
     * @example
     * // Delete a few Listas
     * const { count } = await prisma.listas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ListasDeleteManyArgs>(args?: SelectSubset<T, ListasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Listas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Listas
     * const listas = await prisma.listas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ListasUpdateManyArgs>(args: SelectSubset<T, ListasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Listas.
     * @param {ListasUpsertArgs} args - Arguments to update or create a Listas.
     * @example
     * // Update or create a Listas
     * const listas = await prisma.listas.upsert({
     *   create: {
     *     // ... data to create a Listas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Listas we want to update
     *   }
     * })
     */
    upsert<T extends ListasUpsertArgs>(args: SelectSubset<T, ListasUpsertArgs<ExtArgs>>): Prisma__ListasClient<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Listas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListasCountArgs} args - Arguments to filter Listas to count.
     * @example
     * // Count the number of Listas
     * const count = await prisma.listas.count({
     *   where: {
     *     // ... the filter for the Listas we want to count
     *   }
     * })
    **/
    count<T extends ListasCountArgs>(
      args?: Subset<T, ListasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Listas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListasAggregateArgs>(args: Subset<T, ListasAggregateArgs>): Prisma.PrismaPromise<GetListasAggregateType<T>>

    /**
     * Group by Listas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListasGroupByArgs['orderBy'] }
        : { orderBy?: ListasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Listas model
   */
  readonly fields: ListasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Listas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    itens<T extends Listas$itensArgs<ExtArgs> = {}>(args?: Subset<T, Listas$itensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Listas model
   */ 
  interface ListasFieldRefs {
    readonly id: FieldRef<"Listas", 'Int'>
    readonly titulo: FieldRef<"Listas", 'String'>
    readonly usuarioId: FieldRef<"Listas", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Listas findUnique
   */
  export type ListasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    /**
     * Filter, which Listas to fetch.
     */
    where: ListasWhereUniqueInput
  }

  /**
   * Listas findUniqueOrThrow
   */
  export type ListasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    /**
     * Filter, which Listas to fetch.
     */
    where: ListasWhereUniqueInput
  }

  /**
   * Listas findFirst
   */
  export type ListasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    /**
     * Filter, which Listas to fetch.
     */
    where?: ListasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listas to fetch.
     */
    orderBy?: ListasOrderByWithRelationInput | ListasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Listas.
     */
    cursor?: ListasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Listas.
     */
    distinct?: ListasScalarFieldEnum | ListasScalarFieldEnum[]
  }

  /**
   * Listas findFirstOrThrow
   */
  export type ListasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    /**
     * Filter, which Listas to fetch.
     */
    where?: ListasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listas to fetch.
     */
    orderBy?: ListasOrderByWithRelationInput | ListasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Listas.
     */
    cursor?: ListasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Listas.
     */
    distinct?: ListasScalarFieldEnum | ListasScalarFieldEnum[]
  }

  /**
   * Listas findMany
   */
  export type ListasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    /**
     * Filter, which Listas to fetch.
     */
    where?: ListasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listas to fetch.
     */
    orderBy?: ListasOrderByWithRelationInput | ListasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Listas.
     */
    cursor?: ListasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listas.
     */
    skip?: number
    distinct?: ListasScalarFieldEnum | ListasScalarFieldEnum[]
  }

  /**
   * Listas create
   */
  export type ListasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    /**
     * The data needed to create a Listas.
     */
    data: XOR<ListasCreateInput, ListasUncheckedCreateInput>
  }

  /**
   * Listas createMany
   */
  export type ListasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Listas.
     */
    data: ListasCreateManyInput | ListasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Listas update
   */
  export type ListasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    /**
     * The data needed to update a Listas.
     */
    data: XOR<ListasUpdateInput, ListasUncheckedUpdateInput>
    /**
     * Choose, which Listas to update.
     */
    where: ListasWhereUniqueInput
  }

  /**
   * Listas updateMany
   */
  export type ListasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Listas.
     */
    data: XOR<ListasUpdateManyMutationInput, ListasUncheckedUpdateManyInput>
    /**
     * Filter which Listas to update
     */
    where?: ListasWhereInput
  }

  /**
   * Listas upsert
   */
  export type ListasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    /**
     * The filter to search for the Listas to update in case it exists.
     */
    where: ListasWhereUniqueInput
    /**
     * In case the Listas found by the `where` argument doesn't exist, create a new Listas with this data.
     */
    create: XOR<ListasCreateInput, ListasUncheckedCreateInput>
    /**
     * In case the Listas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListasUpdateInput, ListasUncheckedUpdateInput>
  }

  /**
   * Listas delete
   */
  export type ListasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
    /**
     * Filter which Listas to delete.
     */
    where: ListasWhereUniqueInput
  }

  /**
   * Listas deleteMany
   */
  export type ListasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Listas to delete
     */
    where?: ListasWhereInput
  }

  /**
   * Listas.itens
   */
  export type Listas$itensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    where?: ItemListaWhereInput
    orderBy?: ItemListaOrderByWithRelationInput | ItemListaOrderByWithRelationInput[]
    cursor?: ItemListaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemListaScalarFieldEnum | ItemListaScalarFieldEnum[]
  }

  /**
   * Listas without action
   */
  export type ListasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listas
     */
    select?: ListasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListasInclude<ExtArgs> | null
  }


  /**
   * Model Notas
   */

  export type AggregateNotas = {
    _count: NotasCountAggregateOutputType | null
    _avg: NotasAvgAggregateOutputType | null
    _sum: NotasSumAggregateOutputType | null
    _min: NotasMinAggregateOutputType | null
    _max: NotasMaxAggregateOutputType | null
  }

  export type NotasAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type NotasSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type NotasMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    descricao: string | null
    usuarioId: number | null
  }

  export type NotasMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    descricao: string | null
    usuarioId: number | null
  }

  export type NotasCountAggregateOutputType = {
    id: number
    titulo: number
    descricao: number
    usuarioId: number
    _all: number
  }


  export type NotasAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type NotasSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type NotasMinAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    usuarioId?: true
  }

  export type NotasMaxAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    usuarioId?: true
  }

  export type NotasCountAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    usuarioId?: true
    _all?: true
  }

  export type NotasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notas to aggregate.
     */
    where?: NotasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notas to fetch.
     */
    orderBy?: NotasOrderByWithRelationInput | NotasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notas
    **/
    _count?: true | NotasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotasMaxAggregateInputType
  }

  export type GetNotasAggregateType<T extends NotasAggregateArgs> = {
        [P in keyof T & keyof AggregateNotas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotas[P]>
      : GetScalarType<T[P], AggregateNotas[P]>
  }




  export type NotasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotasWhereInput
    orderBy?: NotasOrderByWithAggregationInput | NotasOrderByWithAggregationInput[]
    by: NotasScalarFieldEnum[] | NotasScalarFieldEnum
    having?: NotasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotasCountAggregateInputType | true
    _avg?: NotasAvgAggregateInputType
    _sum?: NotasSumAggregateInputType
    _min?: NotasMinAggregateInputType
    _max?: NotasMaxAggregateInputType
  }

  export type NotasGroupByOutputType = {
    id: number
    titulo: string
    descricao: string
    usuarioId: number
    _count: NotasCountAggregateOutputType | null
    _avg: NotasAvgAggregateOutputType | null
    _sum: NotasSumAggregateOutputType | null
    _min: NotasMinAggregateOutputType | null
    _max: NotasMaxAggregateOutputType | null
  }

  type GetNotasGroupByPayload<T extends NotasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotasGroupByOutputType[P]>
            : GetScalarType<T[P], NotasGroupByOutputType[P]>
        }
      >
    >


  export type NotasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notas"]>


  export type NotasSelectScalar = {
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    usuarioId?: boolean
  }

  export type NotasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $NotasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notas"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      descricao: string
      usuarioId: number
    }, ExtArgs["result"]["notas"]>
    composites: {}
  }

  type NotasGetPayload<S extends boolean | null | undefined | NotasDefaultArgs> = $Result.GetResult<Prisma.$NotasPayload, S>

  type NotasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotasCountAggregateInputType | true
    }

  export interface NotasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notas'], meta: { name: 'Notas' } }
    /**
     * Find zero or one Notas that matches the filter.
     * @param {NotasFindUniqueArgs} args - Arguments to find a Notas
     * @example
     * // Get one Notas
     * const notas = await prisma.notas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotasFindUniqueArgs>(args: SelectSubset<T, NotasFindUniqueArgs<ExtArgs>>): Prisma__NotasClient<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotasFindUniqueOrThrowArgs} args - Arguments to find a Notas
     * @example
     * // Get one Notas
     * const notas = await prisma.notas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotasFindUniqueOrThrowArgs>(args: SelectSubset<T, NotasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotasClient<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotasFindFirstArgs} args - Arguments to find a Notas
     * @example
     * // Get one Notas
     * const notas = await prisma.notas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotasFindFirstArgs>(args?: SelectSubset<T, NotasFindFirstArgs<ExtArgs>>): Prisma__NotasClient<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotasFindFirstOrThrowArgs} args - Arguments to find a Notas
     * @example
     * // Get one Notas
     * const notas = await prisma.notas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotasFindFirstOrThrowArgs>(args?: SelectSubset<T, NotasFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotasClient<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notas
     * const notas = await prisma.notas.findMany()
     * 
     * // Get first 10 Notas
     * const notas = await prisma.notas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notasWithIdOnly = await prisma.notas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotasFindManyArgs>(args?: SelectSubset<T, NotasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notas.
     * @param {NotasCreateArgs} args - Arguments to create a Notas.
     * @example
     * // Create one Notas
     * const Notas = await prisma.notas.create({
     *   data: {
     *     // ... data to create a Notas
     *   }
     * })
     * 
     */
    create<T extends NotasCreateArgs>(args: SelectSubset<T, NotasCreateArgs<ExtArgs>>): Prisma__NotasClient<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notas.
     * @param {NotasCreateManyArgs} args - Arguments to create many Notas.
     * @example
     * // Create many Notas
     * const notas = await prisma.notas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotasCreateManyArgs>(args?: SelectSubset<T, NotasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notas.
     * @param {NotasDeleteArgs} args - Arguments to delete one Notas.
     * @example
     * // Delete one Notas
     * const Notas = await prisma.notas.delete({
     *   where: {
     *     // ... filter to delete one Notas
     *   }
     * })
     * 
     */
    delete<T extends NotasDeleteArgs>(args: SelectSubset<T, NotasDeleteArgs<ExtArgs>>): Prisma__NotasClient<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notas.
     * @param {NotasUpdateArgs} args - Arguments to update one Notas.
     * @example
     * // Update one Notas
     * const notas = await prisma.notas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotasUpdateArgs>(args: SelectSubset<T, NotasUpdateArgs<ExtArgs>>): Prisma__NotasClient<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notas.
     * @param {NotasDeleteManyArgs} args - Arguments to filter Notas to delete.
     * @example
     * // Delete a few Notas
     * const { count } = await prisma.notas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotasDeleteManyArgs>(args?: SelectSubset<T, NotasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notas
     * const notas = await prisma.notas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotasUpdateManyArgs>(args: SelectSubset<T, NotasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notas.
     * @param {NotasUpsertArgs} args - Arguments to update or create a Notas.
     * @example
     * // Update or create a Notas
     * const notas = await prisma.notas.upsert({
     *   create: {
     *     // ... data to create a Notas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notas we want to update
     *   }
     * })
     */
    upsert<T extends NotasUpsertArgs>(args: SelectSubset<T, NotasUpsertArgs<ExtArgs>>): Prisma__NotasClient<$Result.GetResult<Prisma.$NotasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotasCountArgs} args - Arguments to filter Notas to count.
     * @example
     * // Count the number of Notas
     * const count = await prisma.notas.count({
     *   where: {
     *     // ... the filter for the Notas we want to count
     *   }
     * })
    **/
    count<T extends NotasCountArgs>(
      args?: Subset<T, NotasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotasAggregateArgs>(args: Subset<T, NotasAggregateArgs>): Prisma.PrismaPromise<GetNotasAggregateType<T>>

    /**
     * Group by Notas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotasGroupByArgs['orderBy'] }
        : { orderBy?: NotasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notas model
   */
  readonly fields: NotasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notas model
   */ 
  interface NotasFieldRefs {
    readonly id: FieldRef<"Notas", 'Int'>
    readonly titulo: FieldRef<"Notas", 'String'>
    readonly descricao: FieldRef<"Notas", 'String'>
    readonly usuarioId: FieldRef<"Notas", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Notas findUnique
   */
  export type NotasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    /**
     * Filter, which Notas to fetch.
     */
    where: NotasWhereUniqueInput
  }

  /**
   * Notas findUniqueOrThrow
   */
  export type NotasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    /**
     * Filter, which Notas to fetch.
     */
    where: NotasWhereUniqueInput
  }

  /**
   * Notas findFirst
   */
  export type NotasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    /**
     * Filter, which Notas to fetch.
     */
    where?: NotasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notas to fetch.
     */
    orderBy?: NotasOrderByWithRelationInput | NotasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notas.
     */
    cursor?: NotasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notas.
     */
    distinct?: NotasScalarFieldEnum | NotasScalarFieldEnum[]
  }

  /**
   * Notas findFirstOrThrow
   */
  export type NotasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    /**
     * Filter, which Notas to fetch.
     */
    where?: NotasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notas to fetch.
     */
    orderBy?: NotasOrderByWithRelationInput | NotasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notas.
     */
    cursor?: NotasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notas.
     */
    distinct?: NotasScalarFieldEnum | NotasScalarFieldEnum[]
  }

  /**
   * Notas findMany
   */
  export type NotasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    /**
     * Filter, which Notas to fetch.
     */
    where?: NotasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notas to fetch.
     */
    orderBy?: NotasOrderByWithRelationInput | NotasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notas.
     */
    cursor?: NotasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notas.
     */
    skip?: number
    distinct?: NotasScalarFieldEnum | NotasScalarFieldEnum[]
  }

  /**
   * Notas create
   */
  export type NotasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    /**
     * The data needed to create a Notas.
     */
    data: XOR<NotasCreateInput, NotasUncheckedCreateInput>
  }

  /**
   * Notas createMany
   */
  export type NotasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notas.
     */
    data: NotasCreateManyInput | NotasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notas update
   */
  export type NotasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    /**
     * The data needed to update a Notas.
     */
    data: XOR<NotasUpdateInput, NotasUncheckedUpdateInput>
    /**
     * Choose, which Notas to update.
     */
    where: NotasWhereUniqueInput
  }

  /**
   * Notas updateMany
   */
  export type NotasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notas.
     */
    data: XOR<NotasUpdateManyMutationInput, NotasUncheckedUpdateManyInput>
    /**
     * Filter which Notas to update
     */
    where?: NotasWhereInput
  }

  /**
   * Notas upsert
   */
  export type NotasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    /**
     * The filter to search for the Notas to update in case it exists.
     */
    where: NotasWhereUniqueInput
    /**
     * In case the Notas found by the `where` argument doesn't exist, create a new Notas with this data.
     */
    create: XOR<NotasCreateInput, NotasUncheckedCreateInput>
    /**
     * In case the Notas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotasUpdateInput, NotasUncheckedUpdateInput>
  }

  /**
   * Notas delete
   */
  export type NotasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
    /**
     * Filter which Notas to delete.
     */
    where: NotasWhereUniqueInput
  }

  /**
   * Notas deleteMany
   */
  export type NotasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notas to delete
     */
    where?: NotasWhereInput
  }

  /**
   * Notas without action
   */
  export type NotasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notas
     */
    select?: NotasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotasInclude<ExtArgs> | null
  }


  /**
   * Model ItemLista
   */

  export type AggregateItemLista = {
    _count: ItemListaCountAggregateOutputType | null
    _avg: ItemListaAvgAggregateOutputType | null
    _sum: ItemListaSumAggregateOutputType | null
    _min: ItemListaMinAggregateOutputType | null
    _max: ItemListaMaxAggregateOutputType | null
  }

  export type ItemListaAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    listaId: number | null
  }

  export type ItemListaSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    listaId: number | null
  }

  export type ItemListaMinAggregateOutputType = {
    id: number | null
    descricao: string | null
    usuarioId: number | null
    concluido: boolean | null
    listaId: number | null
  }

  export type ItemListaMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
    usuarioId: number | null
    concluido: boolean | null
    listaId: number | null
  }

  export type ItemListaCountAggregateOutputType = {
    id: number
    descricao: number
    usuarioId: number
    concluido: number
    listaId: number
    _all: number
  }


  export type ItemListaAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    listaId?: true
  }

  export type ItemListaSumAggregateInputType = {
    id?: true
    usuarioId?: true
    listaId?: true
  }

  export type ItemListaMinAggregateInputType = {
    id?: true
    descricao?: true
    usuarioId?: true
    concluido?: true
    listaId?: true
  }

  export type ItemListaMaxAggregateInputType = {
    id?: true
    descricao?: true
    usuarioId?: true
    concluido?: true
    listaId?: true
  }

  export type ItemListaCountAggregateInputType = {
    id?: true
    descricao?: true
    usuarioId?: true
    concluido?: true
    listaId?: true
    _all?: true
  }

  export type ItemListaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemLista to aggregate.
     */
    where?: ItemListaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemListas to fetch.
     */
    orderBy?: ItemListaOrderByWithRelationInput | ItemListaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemListaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemListas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemListas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ItemListas
    **/
    _count?: true | ItemListaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemListaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemListaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemListaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemListaMaxAggregateInputType
  }

  export type GetItemListaAggregateType<T extends ItemListaAggregateArgs> = {
        [P in keyof T & keyof AggregateItemLista]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItemLista[P]>
      : GetScalarType<T[P], AggregateItemLista[P]>
  }




  export type ItemListaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemListaWhereInput
    orderBy?: ItemListaOrderByWithAggregationInput | ItemListaOrderByWithAggregationInput[]
    by: ItemListaScalarFieldEnum[] | ItemListaScalarFieldEnum
    having?: ItemListaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemListaCountAggregateInputType | true
    _avg?: ItemListaAvgAggregateInputType
    _sum?: ItemListaSumAggregateInputType
    _min?: ItemListaMinAggregateInputType
    _max?: ItemListaMaxAggregateInputType
  }

  export type ItemListaGroupByOutputType = {
    id: number
    descricao: string
    usuarioId: number
    concluido: boolean
    listaId: number
    _count: ItemListaCountAggregateOutputType | null
    _avg: ItemListaAvgAggregateOutputType | null
    _sum: ItemListaSumAggregateOutputType | null
    _min: ItemListaMinAggregateOutputType | null
    _max: ItemListaMaxAggregateOutputType | null
  }

  type GetItemListaGroupByPayload<T extends ItemListaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemListaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemListaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemListaGroupByOutputType[P]>
            : GetScalarType<T[P], ItemListaGroupByOutputType[P]>
        }
      >
    >


  export type ItemListaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    usuarioId?: boolean
    concluido?: boolean
    listaId?: boolean
    lista?: boolean | ListasDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["itemLista"]>


  export type ItemListaSelectScalar = {
    id?: boolean
    descricao?: boolean
    usuarioId?: boolean
    concluido?: boolean
    listaId?: boolean
  }

  export type ItemListaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lista?: boolean | ListasDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $ItemListaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ItemLista"
    objects: {
      lista: Prisma.$ListasPayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
      usuarioId: number
      concluido: boolean
      listaId: number
    }, ExtArgs["result"]["itemLista"]>
    composites: {}
  }

  type ItemListaGetPayload<S extends boolean | null | undefined | ItemListaDefaultArgs> = $Result.GetResult<Prisma.$ItemListaPayload, S>

  type ItemListaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemListaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemListaCountAggregateInputType | true
    }

  export interface ItemListaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ItemLista'], meta: { name: 'ItemLista' } }
    /**
     * Find zero or one ItemLista that matches the filter.
     * @param {ItemListaFindUniqueArgs} args - Arguments to find a ItemLista
     * @example
     * // Get one ItemLista
     * const itemLista = await prisma.itemLista.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemListaFindUniqueArgs>(args: SelectSubset<T, ItemListaFindUniqueArgs<ExtArgs>>): Prisma__ItemListaClient<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ItemLista that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemListaFindUniqueOrThrowArgs} args - Arguments to find a ItemLista
     * @example
     * // Get one ItemLista
     * const itemLista = await prisma.itemLista.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemListaFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemListaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemListaClient<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ItemLista that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemListaFindFirstArgs} args - Arguments to find a ItemLista
     * @example
     * // Get one ItemLista
     * const itemLista = await prisma.itemLista.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemListaFindFirstArgs>(args?: SelectSubset<T, ItemListaFindFirstArgs<ExtArgs>>): Prisma__ItemListaClient<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ItemLista that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemListaFindFirstOrThrowArgs} args - Arguments to find a ItemLista
     * @example
     * // Get one ItemLista
     * const itemLista = await prisma.itemLista.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemListaFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemListaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemListaClient<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ItemListas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemListaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ItemListas
     * const itemListas = await prisma.itemLista.findMany()
     * 
     * // Get first 10 ItemListas
     * const itemListas = await prisma.itemLista.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemListaWithIdOnly = await prisma.itemLista.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemListaFindManyArgs>(args?: SelectSubset<T, ItemListaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ItemLista.
     * @param {ItemListaCreateArgs} args - Arguments to create a ItemLista.
     * @example
     * // Create one ItemLista
     * const ItemLista = await prisma.itemLista.create({
     *   data: {
     *     // ... data to create a ItemLista
     *   }
     * })
     * 
     */
    create<T extends ItemListaCreateArgs>(args: SelectSubset<T, ItemListaCreateArgs<ExtArgs>>): Prisma__ItemListaClient<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ItemListas.
     * @param {ItemListaCreateManyArgs} args - Arguments to create many ItemListas.
     * @example
     * // Create many ItemListas
     * const itemLista = await prisma.itemLista.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemListaCreateManyArgs>(args?: SelectSubset<T, ItemListaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ItemLista.
     * @param {ItemListaDeleteArgs} args - Arguments to delete one ItemLista.
     * @example
     * // Delete one ItemLista
     * const ItemLista = await prisma.itemLista.delete({
     *   where: {
     *     // ... filter to delete one ItemLista
     *   }
     * })
     * 
     */
    delete<T extends ItemListaDeleteArgs>(args: SelectSubset<T, ItemListaDeleteArgs<ExtArgs>>): Prisma__ItemListaClient<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ItemLista.
     * @param {ItemListaUpdateArgs} args - Arguments to update one ItemLista.
     * @example
     * // Update one ItemLista
     * const itemLista = await prisma.itemLista.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemListaUpdateArgs>(args: SelectSubset<T, ItemListaUpdateArgs<ExtArgs>>): Prisma__ItemListaClient<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ItemListas.
     * @param {ItemListaDeleteManyArgs} args - Arguments to filter ItemListas to delete.
     * @example
     * // Delete a few ItemListas
     * const { count } = await prisma.itemLista.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemListaDeleteManyArgs>(args?: SelectSubset<T, ItemListaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ItemListas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemListaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ItemListas
     * const itemLista = await prisma.itemLista.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemListaUpdateManyArgs>(args: SelectSubset<T, ItemListaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ItemLista.
     * @param {ItemListaUpsertArgs} args - Arguments to update or create a ItemLista.
     * @example
     * // Update or create a ItemLista
     * const itemLista = await prisma.itemLista.upsert({
     *   create: {
     *     // ... data to create a ItemLista
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ItemLista we want to update
     *   }
     * })
     */
    upsert<T extends ItemListaUpsertArgs>(args: SelectSubset<T, ItemListaUpsertArgs<ExtArgs>>): Prisma__ItemListaClient<$Result.GetResult<Prisma.$ItemListaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ItemListas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemListaCountArgs} args - Arguments to filter ItemListas to count.
     * @example
     * // Count the number of ItemListas
     * const count = await prisma.itemLista.count({
     *   where: {
     *     // ... the filter for the ItemListas we want to count
     *   }
     * })
    **/
    count<T extends ItemListaCountArgs>(
      args?: Subset<T, ItemListaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemListaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ItemLista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemListaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemListaAggregateArgs>(args: Subset<T, ItemListaAggregateArgs>): Prisma.PrismaPromise<GetItemListaAggregateType<T>>

    /**
     * Group by ItemLista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemListaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemListaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemListaGroupByArgs['orderBy'] }
        : { orderBy?: ItemListaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemListaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemListaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ItemLista model
   */
  readonly fields: ItemListaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ItemLista.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemListaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lista<T extends ListasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ListasDefaultArgs<ExtArgs>>): Prisma__ListasClient<$Result.GetResult<Prisma.$ListasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ItemLista model
   */ 
  interface ItemListaFieldRefs {
    readonly id: FieldRef<"ItemLista", 'Int'>
    readonly descricao: FieldRef<"ItemLista", 'String'>
    readonly usuarioId: FieldRef<"ItemLista", 'Int'>
    readonly concluido: FieldRef<"ItemLista", 'Boolean'>
    readonly listaId: FieldRef<"ItemLista", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ItemLista findUnique
   */
  export type ItemListaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    /**
     * Filter, which ItemLista to fetch.
     */
    where: ItemListaWhereUniqueInput
  }

  /**
   * ItemLista findUniqueOrThrow
   */
  export type ItemListaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    /**
     * Filter, which ItemLista to fetch.
     */
    where: ItemListaWhereUniqueInput
  }

  /**
   * ItemLista findFirst
   */
  export type ItemListaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    /**
     * Filter, which ItemLista to fetch.
     */
    where?: ItemListaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemListas to fetch.
     */
    orderBy?: ItemListaOrderByWithRelationInput | ItemListaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemListas.
     */
    cursor?: ItemListaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemListas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemListas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemListas.
     */
    distinct?: ItemListaScalarFieldEnum | ItemListaScalarFieldEnum[]
  }

  /**
   * ItemLista findFirstOrThrow
   */
  export type ItemListaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    /**
     * Filter, which ItemLista to fetch.
     */
    where?: ItemListaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemListas to fetch.
     */
    orderBy?: ItemListaOrderByWithRelationInput | ItemListaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemListas.
     */
    cursor?: ItemListaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemListas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemListas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemListas.
     */
    distinct?: ItemListaScalarFieldEnum | ItemListaScalarFieldEnum[]
  }

  /**
   * ItemLista findMany
   */
  export type ItemListaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    /**
     * Filter, which ItemListas to fetch.
     */
    where?: ItemListaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemListas to fetch.
     */
    orderBy?: ItemListaOrderByWithRelationInput | ItemListaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ItemListas.
     */
    cursor?: ItemListaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemListas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemListas.
     */
    skip?: number
    distinct?: ItemListaScalarFieldEnum | ItemListaScalarFieldEnum[]
  }

  /**
   * ItemLista create
   */
  export type ItemListaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    /**
     * The data needed to create a ItemLista.
     */
    data: XOR<ItemListaCreateInput, ItemListaUncheckedCreateInput>
  }

  /**
   * ItemLista createMany
   */
  export type ItemListaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ItemListas.
     */
    data: ItemListaCreateManyInput | ItemListaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ItemLista update
   */
  export type ItemListaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    /**
     * The data needed to update a ItemLista.
     */
    data: XOR<ItemListaUpdateInput, ItemListaUncheckedUpdateInput>
    /**
     * Choose, which ItemLista to update.
     */
    where: ItemListaWhereUniqueInput
  }

  /**
   * ItemLista updateMany
   */
  export type ItemListaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ItemListas.
     */
    data: XOR<ItemListaUpdateManyMutationInput, ItemListaUncheckedUpdateManyInput>
    /**
     * Filter which ItemListas to update
     */
    where?: ItemListaWhereInput
  }

  /**
   * ItemLista upsert
   */
  export type ItemListaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    /**
     * The filter to search for the ItemLista to update in case it exists.
     */
    where: ItemListaWhereUniqueInput
    /**
     * In case the ItemLista found by the `where` argument doesn't exist, create a new ItemLista with this data.
     */
    create: XOR<ItemListaCreateInput, ItemListaUncheckedCreateInput>
    /**
     * In case the ItemLista was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemListaUpdateInput, ItemListaUncheckedUpdateInput>
  }

  /**
   * ItemLista delete
   */
  export type ItemListaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
    /**
     * Filter which ItemLista to delete.
     */
    where: ItemListaWhereUniqueInput
  }

  /**
   * ItemLista deleteMany
   */
  export type ItemListaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemListas to delete
     */
    where?: ItemListaWhereInput
  }

  /**
   * ItemLista without action
   */
  export type ItemListaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemLista
     */
    select?: ItemListaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemListaInclude<ExtArgs> | null
  }


  /**
   * Model Agenda
   */

  export type AggregateAgenda = {
    _count: AgendaCountAggregateOutputType | null
    _avg: AgendaAvgAggregateOutputType | null
    _sum: AgendaSumAggregateOutputType | null
    _min: AgendaMinAggregateOutputType | null
    _max: AgendaMaxAggregateOutputType | null
  }

  export type AgendaAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type AgendaSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type AgendaMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    descricao: string | null
    data: Date | null
    usuarioId: number | null
  }

  export type AgendaMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    descricao: string | null
    data: Date | null
    usuarioId: number | null
  }

  export type AgendaCountAggregateOutputType = {
    id: number
    titulo: number
    descricao: number
    data: number
    usuarioId: number
    _all: number
  }


  export type AgendaAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type AgendaSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type AgendaMinAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    data?: true
    usuarioId?: true
  }

  export type AgendaMaxAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    data?: true
    usuarioId?: true
  }

  export type AgendaCountAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    data?: true
    usuarioId?: true
    _all?: true
  }

  export type AgendaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agenda to aggregate.
     */
    where?: AgendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agenda to fetch.
     */
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agenda from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agenda.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agenda
    **/
    _count?: true | AgendaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgendaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgendaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgendaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgendaMaxAggregateInputType
  }

  export type GetAgendaAggregateType<T extends AgendaAggregateArgs> = {
        [P in keyof T & keyof AggregateAgenda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgenda[P]>
      : GetScalarType<T[P], AggregateAgenda[P]>
  }




  export type AgendaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendaWhereInput
    orderBy?: AgendaOrderByWithAggregationInput | AgendaOrderByWithAggregationInput[]
    by: AgendaScalarFieldEnum[] | AgendaScalarFieldEnum
    having?: AgendaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgendaCountAggregateInputType | true
    _avg?: AgendaAvgAggregateInputType
    _sum?: AgendaSumAggregateInputType
    _min?: AgendaMinAggregateInputType
    _max?: AgendaMaxAggregateInputType
  }

  export type AgendaGroupByOutputType = {
    id: number
    titulo: string
    descricao: string | null
    data: Date
    usuarioId: number
    _count: AgendaCountAggregateOutputType | null
    _avg: AgendaAvgAggregateOutputType | null
    _sum: AgendaSumAggregateOutputType | null
    _min: AgendaMinAggregateOutputType | null
    _max: AgendaMaxAggregateOutputType | null
  }

  type GetAgendaGroupByPayload<T extends AgendaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgendaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgendaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgendaGroupByOutputType[P]>
            : GetScalarType<T[P], AgendaGroupByOutputType[P]>
        }
      >
    >


  export type AgendaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    data?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agenda"]>


  export type AgendaSelectScalar = {
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    data?: boolean
    usuarioId?: boolean
  }

  export type AgendaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $AgendaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agenda"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      descricao: string | null
      data: Date
      usuarioId: number
    }, ExtArgs["result"]["agenda"]>
    composites: {}
  }

  type AgendaGetPayload<S extends boolean | null | undefined | AgendaDefaultArgs> = $Result.GetResult<Prisma.$AgendaPayload, S>

  type AgendaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgendaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgendaCountAggregateInputType | true
    }

  export interface AgendaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agenda'], meta: { name: 'Agenda' } }
    /**
     * Find zero or one Agenda that matches the filter.
     * @param {AgendaFindUniqueArgs} args - Arguments to find a Agenda
     * @example
     * // Get one Agenda
     * const agenda = await prisma.agenda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgendaFindUniqueArgs>(args: SelectSubset<T, AgendaFindUniqueArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Agenda that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgendaFindUniqueOrThrowArgs} args - Arguments to find a Agenda
     * @example
     * // Get one Agenda
     * const agenda = await prisma.agenda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgendaFindUniqueOrThrowArgs>(args: SelectSubset<T, AgendaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Agenda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaFindFirstArgs} args - Arguments to find a Agenda
     * @example
     * // Get one Agenda
     * const agenda = await prisma.agenda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgendaFindFirstArgs>(args?: SelectSubset<T, AgendaFindFirstArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Agenda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaFindFirstOrThrowArgs} args - Arguments to find a Agenda
     * @example
     * // Get one Agenda
     * const agenda = await prisma.agenda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgendaFindFirstOrThrowArgs>(args?: SelectSubset<T, AgendaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Agenda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agenda
     * const agenda = await prisma.agenda.findMany()
     * 
     * // Get first 10 Agenda
     * const agenda = await prisma.agenda.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agendaWithIdOnly = await prisma.agenda.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgendaFindManyArgs>(args?: SelectSubset<T, AgendaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Agenda.
     * @param {AgendaCreateArgs} args - Arguments to create a Agenda.
     * @example
     * // Create one Agenda
     * const Agenda = await prisma.agenda.create({
     *   data: {
     *     // ... data to create a Agenda
     *   }
     * })
     * 
     */
    create<T extends AgendaCreateArgs>(args: SelectSubset<T, AgendaCreateArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Agenda.
     * @param {AgendaCreateManyArgs} args - Arguments to create many Agenda.
     * @example
     * // Create many Agenda
     * const agenda = await prisma.agenda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgendaCreateManyArgs>(args?: SelectSubset<T, AgendaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Agenda.
     * @param {AgendaDeleteArgs} args - Arguments to delete one Agenda.
     * @example
     * // Delete one Agenda
     * const Agenda = await prisma.agenda.delete({
     *   where: {
     *     // ... filter to delete one Agenda
     *   }
     * })
     * 
     */
    delete<T extends AgendaDeleteArgs>(args: SelectSubset<T, AgendaDeleteArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Agenda.
     * @param {AgendaUpdateArgs} args - Arguments to update one Agenda.
     * @example
     * // Update one Agenda
     * const agenda = await prisma.agenda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgendaUpdateArgs>(args: SelectSubset<T, AgendaUpdateArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Agenda.
     * @param {AgendaDeleteManyArgs} args - Arguments to filter Agenda to delete.
     * @example
     * // Delete a few Agenda
     * const { count } = await prisma.agenda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgendaDeleteManyArgs>(args?: SelectSubset<T, AgendaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agenda
     * const agenda = await prisma.agenda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgendaUpdateManyArgs>(args: SelectSubset<T, AgendaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agenda.
     * @param {AgendaUpsertArgs} args - Arguments to update or create a Agenda.
     * @example
     * // Update or create a Agenda
     * const agenda = await prisma.agenda.upsert({
     *   create: {
     *     // ... data to create a Agenda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agenda we want to update
     *   }
     * })
     */
    upsert<T extends AgendaUpsertArgs>(args: SelectSubset<T, AgendaUpsertArgs<ExtArgs>>): Prisma__AgendaClient<$Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Agenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaCountArgs} args - Arguments to filter Agenda to count.
     * @example
     * // Count the number of Agenda
     * const count = await prisma.agenda.count({
     *   where: {
     *     // ... the filter for the Agenda we want to count
     *   }
     * })
    **/
    count<T extends AgendaCountArgs>(
      args?: Subset<T, AgendaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgendaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgendaAggregateArgs>(args: Subset<T, AgendaAggregateArgs>): Prisma.PrismaPromise<GetAgendaAggregateType<T>>

    /**
     * Group by Agenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgendaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgendaGroupByArgs['orderBy'] }
        : { orderBy?: AgendaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgendaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgendaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agenda model
   */
  readonly fields: AgendaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agenda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgendaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agenda model
   */ 
  interface AgendaFieldRefs {
    readonly id: FieldRef<"Agenda", 'Int'>
    readonly titulo: FieldRef<"Agenda", 'String'>
    readonly descricao: FieldRef<"Agenda", 'String'>
    readonly data: FieldRef<"Agenda", 'DateTime'>
    readonly usuarioId: FieldRef<"Agenda", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Agenda findUnique
   */
  export type AgendaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where: AgendaWhereUniqueInput
  }

  /**
   * Agenda findUniqueOrThrow
   */
  export type AgendaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where: AgendaWhereUniqueInput
  }

  /**
   * Agenda findFirst
   */
  export type AgendaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where?: AgendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agenda to fetch.
     */
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agenda.
     */
    cursor?: AgendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agenda from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agenda.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agenda.
     */
    distinct?: AgendaScalarFieldEnum | AgendaScalarFieldEnum[]
  }

  /**
   * Agenda findFirstOrThrow
   */
  export type AgendaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where?: AgendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agenda to fetch.
     */
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agenda.
     */
    cursor?: AgendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agenda from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agenda.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agenda.
     */
    distinct?: AgendaScalarFieldEnum | AgendaScalarFieldEnum[]
  }

  /**
   * Agenda findMany
   */
  export type AgendaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter, which Agenda to fetch.
     */
    where?: AgendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agenda to fetch.
     */
    orderBy?: AgendaOrderByWithRelationInput | AgendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agenda.
     */
    cursor?: AgendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agenda from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agenda.
     */
    skip?: number
    distinct?: AgendaScalarFieldEnum | AgendaScalarFieldEnum[]
  }

  /**
   * Agenda create
   */
  export type AgendaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * The data needed to create a Agenda.
     */
    data: XOR<AgendaCreateInput, AgendaUncheckedCreateInput>
  }

  /**
   * Agenda createMany
   */
  export type AgendaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agenda.
     */
    data: AgendaCreateManyInput | AgendaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agenda update
   */
  export type AgendaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * The data needed to update a Agenda.
     */
    data: XOR<AgendaUpdateInput, AgendaUncheckedUpdateInput>
    /**
     * Choose, which Agenda to update.
     */
    where: AgendaWhereUniqueInput
  }

  /**
   * Agenda updateMany
   */
  export type AgendaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agenda.
     */
    data: XOR<AgendaUpdateManyMutationInput, AgendaUncheckedUpdateManyInput>
    /**
     * Filter which Agenda to update
     */
    where?: AgendaWhereInput
  }

  /**
   * Agenda upsert
   */
  export type AgendaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * The filter to search for the Agenda to update in case it exists.
     */
    where: AgendaWhereUniqueInput
    /**
     * In case the Agenda found by the `where` argument doesn't exist, create a new Agenda with this data.
     */
    create: XOR<AgendaCreateInput, AgendaUncheckedCreateInput>
    /**
     * In case the Agenda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgendaUpdateInput, AgendaUncheckedUpdateInput>
  }

  /**
   * Agenda delete
   */
  export type AgendaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
    /**
     * Filter which Agenda to delete.
     */
    where: AgendaWhereUniqueInput
  }

  /**
   * Agenda deleteMany
   */
  export type AgendaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agenda to delete
     */
    where?: AgendaWhereInput
  }

  /**
   * Agenda without action
   */
  export type AgendaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agenda
     */
    select?: AgendaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    nascimento: 'nascimento',
    pontuacao: 'pontuacao',
    criadoEm: 'criadoEm'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const AtividadeScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    descricao: 'descricao',
    usuarioId: 'usuarioId',
    data: 'data',
    concluido: 'concluido'
  };

  export type AtividadeScalarFieldEnum = (typeof AtividadeScalarFieldEnum)[keyof typeof AtividadeScalarFieldEnum]


  export const ListasScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    usuarioId: 'usuarioId'
  };

  export type ListasScalarFieldEnum = (typeof ListasScalarFieldEnum)[keyof typeof ListasScalarFieldEnum]


  export const NotasScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    descricao: 'descricao',
    usuarioId: 'usuarioId'
  };

  export type NotasScalarFieldEnum = (typeof NotasScalarFieldEnum)[keyof typeof NotasScalarFieldEnum]


  export const ItemListaScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    usuarioId: 'usuarioId',
    concluido: 'concluido',
    listaId: 'listaId'
  };

  export type ItemListaScalarFieldEnum = (typeof ItemListaScalarFieldEnum)[keyof typeof ItemListaScalarFieldEnum]


  export const AgendaScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    descricao: 'descricao',
    data: 'data',
    usuarioId: 'usuarioId'
  };

  export type AgendaScalarFieldEnum = (typeof AgendaScalarFieldEnum)[keyof typeof AgendaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    nascimento?: DateTimeFilter<"Usuario"> | Date | string
    pontuacao?: IntFilter<"Usuario"> | number
    criadoEm?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    itenslista?: ItemListaListRelationFilter
    lista?: ListasListRelationFilter
    agenda?: AgendaListRelationFilter
    atividade?: AtividadeListRelationFilter
    notas?: NotasListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nascimento?: SortOrder
    pontuacao?: SortOrder
    criadoEm?: SortOrderInput | SortOrder
    itenslista?: ItemListaOrderByRelationAggregateInput
    lista?: ListasOrderByRelationAggregateInput
    agenda?: AgendaOrderByRelationAggregateInput
    atividade?: AtividadeOrderByRelationAggregateInput
    notas?: NotasOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    nascimento?: DateTimeFilter<"Usuario"> | Date | string
    pontuacao?: IntFilter<"Usuario"> | number
    criadoEm?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    itenslista?: ItemListaListRelationFilter
    lista?: ListasListRelationFilter
    agenda?: AgendaListRelationFilter
    atividade?: AtividadeListRelationFilter
    notas?: NotasListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nascimento?: SortOrder
    pontuacao?: SortOrder
    criadoEm?: SortOrderInput | SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    nascimento?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    pontuacao?: IntWithAggregatesFilter<"Usuario"> | number
    criadoEm?: DateTimeNullableWithAggregatesFilter<"Usuario"> | Date | string | null
  }

  export type AtividadeWhereInput = {
    AND?: AtividadeWhereInput | AtividadeWhereInput[]
    OR?: AtividadeWhereInput[]
    NOT?: AtividadeWhereInput | AtividadeWhereInput[]
    id?: IntFilter<"Atividade"> | number
    titulo?: StringFilter<"Atividade"> | string
    descricao?: StringNullableFilter<"Atividade"> | string | null
    usuarioId?: IntFilter<"Atividade"> | number
    data?: DateTimeNullableFilter<"Atividade"> | Date | string | null
    concluido?: BoolFilter<"Atividade"> | boolean
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type AtividadeOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrderInput | SortOrder
    usuarioId?: SortOrder
    data?: SortOrderInput | SortOrder
    concluido?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type AtividadeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AtividadeWhereInput | AtividadeWhereInput[]
    OR?: AtividadeWhereInput[]
    NOT?: AtividadeWhereInput | AtividadeWhereInput[]
    titulo?: StringFilter<"Atividade"> | string
    descricao?: StringNullableFilter<"Atividade"> | string | null
    usuarioId?: IntFilter<"Atividade"> | number
    data?: DateTimeNullableFilter<"Atividade"> | Date | string | null
    concluido?: BoolFilter<"Atividade"> | boolean
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type AtividadeOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrderInput | SortOrder
    usuarioId?: SortOrder
    data?: SortOrderInput | SortOrder
    concluido?: SortOrder
    _count?: AtividadeCountOrderByAggregateInput
    _avg?: AtividadeAvgOrderByAggregateInput
    _max?: AtividadeMaxOrderByAggregateInput
    _min?: AtividadeMinOrderByAggregateInput
    _sum?: AtividadeSumOrderByAggregateInput
  }

  export type AtividadeScalarWhereWithAggregatesInput = {
    AND?: AtividadeScalarWhereWithAggregatesInput | AtividadeScalarWhereWithAggregatesInput[]
    OR?: AtividadeScalarWhereWithAggregatesInput[]
    NOT?: AtividadeScalarWhereWithAggregatesInput | AtividadeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Atividade"> | number
    titulo?: StringWithAggregatesFilter<"Atividade"> | string
    descricao?: StringNullableWithAggregatesFilter<"Atividade"> | string | null
    usuarioId?: IntWithAggregatesFilter<"Atividade"> | number
    data?: DateTimeNullableWithAggregatesFilter<"Atividade"> | Date | string | null
    concluido?: BoolWithAggregatesFilter<"Atividade"> | boolean
  }

  export type ListasWhereInput = {
    AND?: ListasWhereInput | ListasWhereInput[]
    OR?: ListasWhereInput[]
    NOT?: ListasWhereInput | ListasWhereInput[]
    id?: IntFilter<"Listas"> | number
    titulo?: StringFilter<"Listas"> | string
    usuarioId?: IntFilter<"Listas"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    itens?: ItemListaListRelationFilter
  }

  export type ListasOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    usuarioId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    itens?: ItemListaOrderByRelationAggregateInput
  }

  export type ListasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ListasWhereInput | ListasWhereInput[]
    OR?: ListasWhereInput[]
    NOT?: ListasWhereInput | ListasWhereInput[]
    titulo?: StringFilter<"Listas"> | string
    usuarioId?: IntFilter<"Listas"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    itens?: ItemListaListRelationFilter
  }, "id">

  export type ListasOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    usuarioId?: SortOrder
    _count?: ListasCountOrderByAggregateInput
    _avg?: ListasAvgOrderByAggregateInput
    _max?: ListasMaxOrderByAggregateInput
    _min?: ListasMinOrderByAggregateInput
    _sum?: ListasSumOrderByAggregateInput
  }

  export type ListasScalarWhereWithAggregatesInput = {
    AND?: ListasScalarWhereWithAggregatesInput | ListasScalarWhereWithAggregatesInput[]
    OR?: ListasScalarWhereWithAggregatesInput[]
    NOT?: ListasScalarWhereWithAggregatesInput | ListasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Listas"> | number
    titulo?: StringWithAggregatesFilter<"Listas"> | string
    usuarioId?: IntWithAggregatesFilter<"Listas"> | number
  }

  export type NotasWhereInput = {
    AND?: NotasWhereInput | NotasWhereInput[]
    OR?: NotasWhereInput[]
    NOT?: NotasWhereInput | NotasWhereInput[]
    id?: IntFilter<"Notas"> | number
    titulo?: StringFilter<"Notas"> | string
    descricao?: StringFilter<"Notas"> | string
    usuarioId?: IntFilter<"Notas"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type NotasOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type NotasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotasWhereInput | NotasWhereInput[]
    OR?: NotasWhereInput[]
    NOT?: NotasWhereInput | NotasWhereInput[]
    titulo?: StringFilter<"Notas"> | string
    descricao?: StringFilter<"Notas"> | string
    usuarioId?: IntFilter<"Notas"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type NotasOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    _count?: NotasCountOrderByAggregateInput
    _avg?: NotasAvgOrderByAggregateInput
    _max?: NotasMaxOrderByAggregateInput
    _min?: NotasMinOrderByAggregateInput
    _sum?: NotasSumOrderByAggregateInput
  }

  export type NotasScalarWhereWithAggregatesInput = {
    AND?: NotasScalarWhereWithAggregatesInput | NotasScalarWhereWithAggregatesInput[]
    OR?: NotasScalarWhereWithAggregatesInput[]
    NOT?: NotasScalarWhereWithAggregatesInput | NotasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notas"> | number
    titulo?: StringWithAggregatesFilter<"Notas"> | string
    descricao?: StringWithAggregatesFilter<"Notas"> | string
    usuarioId?: IntWithAggregatesFilter<"Notas"> | number
  }

  export type ItemListaWhereInput = {
    AND?: ItemListaWhereInput | ItemListaWhereInput[]
    OR?: ItemListaWhereInput[]
    NOT?: ItemListaWhereInput | ItemListaWhereInput[]
    id?: IntFilter<"ItemLista"> | number
    descricao?: StringFilter<"ItemLista"> | string
    usuarioId?: IntFilter<"ItemLista"> | number
    concluido?: BoolFilter<"ItemLista"> | boolean
    listaId?: IntFilter<"ItemLista"> | number
    lista?: XOR<ListasRelationFilter, ListasWhereInput>
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type ItemListaOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    concluido?: SortOrder
    listaId?: SortOrder
    lista?: ListasOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type ItemListaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ItemListaWhereInput | ItemListaWhereInput[]
    OR?: ItemListaWhereInput[]
    NOT?: ItemListaWhereInput | ItemListaWhereInput[]
    descricao?: StringFilter<"ItemLista"> | string
    usuarioId?: IntFilter<"ItemLista"> | number
    concluido?: BoolFilter<"ItemLista"> | boolean
    listaId?: IntFilter<"ItemLista"> | number
    lista?: XOR<ListasRelationFilter, ListasWhereInput>
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type ItemListaOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    concluido?: SortOrder
    listaId?: SortOrder
    _count?: ItemListaCountOrderByAggregateInput
    _avg?: ItemListaAvgOrderByAggregateInput
    _max?: ItemListaMaxOrderByAggregateInput
    _min?: ItemListaMinOrderByAggregateInput
    _sum?: ItemListaSumOrderByAggregateInput
  }

  export type ItemListaScalarWhereWithAggregatesInput = {
    AND?: ItemListaScalarWhereWithAggregatesInput | ItemListaScalarWhereWithAggregatesInput[]
    OR?: ItemListaScalarWhereWithAggregatesInput[]
    NOT?: ItemListaScalarWhereWithAggregatesInput | ItemListaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ItemLista"> | number
    descricao?: StringWithAggregatesFilter<"ItemLista"> | string
    usuarioId?: IntWithAggregatesFilter<"ItemLista"> | number
    concluido?: BoolWithAggregatesFilter<"ItemLista"> | boolean
    listaId?: IntWithAggregatesFilter<"ItemLista"> | number
  }

  export type AgendaWhereInput = {
    AND?: AgendaWhereInput | AgendaWhereInput[]
    OR?: AgendaWhereInput[]
    NOT?: AgendaWhereInput | AgendaWhereInput[]
    id?: IntFilter<"Agenda"> | number
    titulo?: StringFilter<"Agenda"> | string
    descricao?: StringNullableFilter<"Agenda"> | string | null
    data?: DateTimeFilter<"Agenda"> | Date | string
    usuarioId?: IntFilter<"Agenda"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type AgendaOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrderInput | SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type AgendaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AgendaWhereInput | AgendaWhereInput[]
    OR?: AgendaWhereInput[]
    NOT?: AgendaWhereInput | AgendaWhereInput[]
    titulo?: StringFilter<"Agenda"> | string
    descricao?: StringNullableFilter<"Agenda"> | string | null
    data?: DateTimeFilter<"Agenda"> | Date | string
    usuarioId?: IntFilter<"Agenda"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type AgendaOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrderInput | SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
    _count?: AgendaCountOrderByAggregateInput
    _avg?: AgendaAvgOrderByAggregateInput
    _max?: AgendaMaxOrderByAggregateInput
    _min?: AgendaMinOrderByAggregateInput
    _sum?: AgendaSumOrderByAggregateInput
  }

  export type AgendaScalarWhereWithAggregatesInput = {
    AND?: AgendaScalarWhereWithAggregatesInput | AgendaScalarWhereWithAggregatesInput[]
    OR?: AgendaScalarWhereWithAggregatesInput[]
    NOT?: AgendaScalarWhereWithAggregatesInput | AgendaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Agenda"> | number
    titulo?: StringWithAggregatesFilter<"Agenda"> | string
    descricao?: StringNullableWithAggregatesFilter<"Agenda"> | string | null
    data?: DateTimeWithAggregatesFilter<"Agenda"> | Date | string
    usuarioId?: IntWithAggregatesFilter<"Agenda"> | number
  }

  export type UsuarioCreateInput = {
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaCreateNestedManyWithoutUsuarioInput
    lista?: ListasCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeCreateNestedManyWithoutUsuarioInput
    notas?: NotasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaUncheckedCreateNestedManyWithoutUsuarioInput
    lista?: ListasUncheckedCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaUncheckedCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeUncheckedCreateNestedManyWithoutUsuarioInput
    notas?: NotasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUpdateManyWithoutUsuarioNestedInput
    lista?: ListasUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUncheckedUpdateManyWithoutUsuarioNestedInput
    lista?: ListasUncheckedUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUncheckedUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUncheckedUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AtividadeCreateInput = {
    titulo: string
    descricao?: string | null
    data?: Date | string | null
    concluido?: boolean
    usuario: UsuarioCreateNestedOneWithoutAtividadeInput
  }

  export type AtividadeUncheckedCreateInput = {
    id?: number
    titulo: string
    descricao?: string | null
    usuarioId: number
    data?: Date | string | null
    concluido?: boolean
  }

  export type AtividadeUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concluido?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutAtividadeNestedInput
  }

  export type AtividadeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: IntFieldUpdateOperationsInput | number
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concluido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AtividadeCreateManyInput = {
    id?: number
    titulo: string
    descricao?: string | null
    usuarioId: number
    data?: Date | string | null
    concluido?: boolean
  }

  export type AtividadeUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concluido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AtividadeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: IntFieldUpdateOperationsInput | number
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concluido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ListasCreateInput = {
    titulo: string
    usuario: UsuarioCreateNestedOneWithoutListaInput
    itens?: ItemListaCreateNestedManyWithoutListaInput
  }

  export type ListasUncheckedCreateInput = {
    id?: number
    titulo: string
    usuarioId: number
    itens?: ItemListaUncheckedCreateNestedManyWithoutListaInput
  }

  export type ListasUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutListaNestedInput
    itens?: ItemListaUpdateManyWithoutListaNestedInput
  }

  export type ListasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    itens?: ItemListaUncheckedUpdateManyWithoutListaNestedInput
  }

  export type ListasCreateManyInput = {
    id?: number
    titulo: string
    usuarioId: number
  }

  export type ListasUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
  }

  export type ListasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type NotasCreateInput = {
    titulo: string
    descricao: string
    usuario: UsuarioCreateNestedOneWithoutNotasInput
  }

  export type NotasUncheckedCreateInput = {
    id?: number
    titulo: string
    descricao: string
    usuarioId: number
  }

  export type NotasUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutNotasNestedInput
  }

  export type NotasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type NotasCreateManyInput = {
    id?: number
    titulo: string
    descricao: string
    usuarioId: number
  }

  export type NotasUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type NotasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ItemListaCreateInput = {
    descricao: string
    concluido?: boolean
    lista: ListasCreateNestedOneWithoutItensInput
    usuario: UsuarioCreateNestedOneWithoutItenslistaInput
  }

  export type ItemListaUncheckedCreateInput = {
    id?: number
    descricao: string
    usuarioId: number
    concluido?: boolean
    listaId: number
  }

  export type ItemListaUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    lista?: ListasUpdateOneRequiredWithoutItensNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutItenslistaNestedInput
  }

  export type ItemListaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    concluido?: BoolFieldUpdateOperationsInput | boolean
    listaId?: IntFieldUpdateOperationsInput | number
  }

  export type ItemListaCreateManyInput = {
    id?: number
    descricao: string
    usuarioId: number
    concluido?: boolean
    listaId: number
  }

  export type ItemListaUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemListaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    concluido?: BoolFieldUpdateOperationsInput | boolean
    listaId?: IntFieldUpdateOperationsInput | number
  }

  export type AgendaCreateInput = {
    titulo: string
    descricao?: string | null
    data: Date | string
    usuario: UsuarioCreateNestedOneWithoutAgendaInput
  }

  export type AgendaUncheckedCreateInput = {
    id?: number
    titulo: string
    descricao?: string | null
    data: Date | string
    usuarioId: number
  }

  export type AgendaUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutAgendaNestedInput
  }

  export type AgendaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type AgendaCreateManyInput = {
    id?: number
    titulo: string
    descricao?: string | null
    data: Date | string
    usuarioId: number
  }

  export type AgendaUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ItemListaListRelationFilter = {
    every?: ItemListaWhereInput
    some?: ItemListaWhereInput
    none?: ItemListaWhereInput
  }

  export type ListasListRelationFilter = {
    every?: ListasWhereInput
    some?: ListasWhereInput
    none?: ListasWhereInput
  }

  export type AgendaListRelationFilter = {
    every?: AgendaWhereInput
    some?: AgendaWhereInput
    none?: AgendaWhereInput
  }

  export type AtividadeListRelationFilter = {
    every?: AtividadeWhereInput
    some?: AtividadeWhereInput
    none?: AtividadeWhereInput
  }

  export type NotasListRelationFilter = {
    every?: NotasWhereInput
    some?: NotasWhereInput
    none?: NotasWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ItemListaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ListasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgendaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AtividadeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nascimento?: SortOrder
    pontuacao?: SortOrder
    criadoEm?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    pontuacao?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nascimento?: SortOrder
    pontuacao?: SortOrder
    criadoEm?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nascimento?: SortOrder
    pontuacao?: SortOrder
    criadoEm?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    pontuacao?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type AtividadeCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    data?: SortOrder
    concluido?: SortOrder
  }

  export type AtividadeAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type AtividadeMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    data?: SortOrder
    concluido?: SortOrder
  }

  export type AtividadeMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    data?: SortOrder
    concluido?: SortOrder
  }

  export type AtividadeSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ListasCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    usuarioId?: SortOrder
  }

  export type ListasAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type ListasMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    usuarioId?: SortOrder
  }

  export type ListasMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    usuarioId?: SortOrder
  }

  export type ListasSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type NotasCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
  }

  export type NotasAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type NotasMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
  }

  export type NotasMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
  }

  export type NotasSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type ListasRelationFilter = {
    is?: ListasWhereInput
    isNot?: ListasWhereInput
  }

  export type ItemListaCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    concluido?: SortOrder
    listaId?: SortOrder
  }

  export type ItemListaAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    listaId?: SortOrder
  }

  export type ItemListaMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    concluido?: SortOrder
    listaId?: SortOrder
  }

  export type ItemListaMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    concluido?: SortOrder
    listaId?: SortOrder
  }

  export type ItemListaSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    listaId?: SortOrder
  }

  export type AgendaCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
  }

  export type AgendaAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type AgendaMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
  }

  export type AgendaMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    usuarioId?: SortOrder
  }

  export type AgendaSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type ItemListaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ItemListaCreateWithoutUsuarioInput, ItemListaUncheckedCreateWithoutUsuarioInput> | ItemListaCreateWithoutUsuarioInput[] | ItemListaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ItemListaCreateOrConnectWithoutUsuarioInput | ItemListaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ItemListaCreateManyUsuarioInputEnvelope
    connect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
  }

  export type ListasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ListasCreateWithoutUsuarioInput, ListasUncheckedCreateWithoutUsuarioInput> | ListasCreateWithoutUsuarioInput[] | ListasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ListasCreateOrConnectWithoutUsuarioInput | ListasCreateOrConnectWithoutUsuarioInput[]
    createMany?: ListasCreateManyUsuarioInputEnvelope
    connect?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
  }

  export type AgendaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AgendaCreateWithoutUsuarioInput, AgendaUncheckedCreateWithoutUsuarioInput> | AgendaCreateWithoutUsuarioInput[] | AgendaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AgendaCreateOrConnectWithoutUsuarioInput | AgendaCreateOrConnectWithoutUsuarioInput[]
    createMany?: AgendaCreateManyUsuarioInputEnvelope
    connect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
  }

  export type AtividadeCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AtividadeCreateWithoutUsuarioInput, AtividadeUncheckedCreateWithoutUsuarioInput> | AtividadeCreateWithoutUsuarioInput[] | AtividadeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AtividadeCreateOrConnectWithoutUsuarioInput | AtividadeCreateOrConnectWithoutUsuarioInput[]
    createMany?: AtividadeCreateManyUsuarioInputEnvelope
    connect?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
  }

  export type NotasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<NotasCreateWithoutUsuarioInput, NotasUncheckedCreateWithoutUsuarioInput> | NotasCreateWithoutUsuarioInput[] | NotasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotasCreateOrConnectWithoutUsuarioInput | NotasCreateOrConnectWithoutUsuarioInput[]
    createMany?: NotasCreateManyUsuarioInputEnvelope
    connect?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
  }

  export type ItemListaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ItemListaCreateWithoutUsuarioInput, ItemListaUncheckedCreateWithoutUsuarioInput> | ItemListaCreateWithoutUsuarioInput[] | ItemListaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ItemListaCreateOrConnectWithoutUsuarioInput | ItemListaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ItemListaCreateManyUsuarioInputEnvelope
    connect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
  }

  export type ListasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ListasCreateWithoutUsuarioInput, ListasUncheckedCreateWithoutUsuarioInput> | ListasCreateWithoutUsuarioInput[] | ListasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ListasCreateOrConnectWithoutUsuarioInput | ListasCreateOrConnectWithoutUsuarioInput[]
    createMany?: ListasCreateManyUsuarioInputEnvelope
    connect?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
  }

  export type AgendaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AgendaCreateWithoutUsuarioInput, AgendaUncheckedCreateWithoutUsuarioInput> | AgendaCreateWithoutUsuarioInput[] | AgendaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AgendaCreateOrConnectWithoutUsuarioInput | AgendaCreateOrConnectWithoutUsuarioInput[]
    createMany?: AgendaCreateManyUsuarioInputEnvelope
    connect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
  }

  export type AtividadeUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AtividadeCreateWithoutUsuarioInput, AtividadeUncheckedCreateWithoutUsuarioInput> | AtividadeCreateWithoutUsuarioInput[] | AtividadeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AtividadeCreateOrConnectWithoutUsuarioInput | AtividadeCreateOrConnectWithoutUsuarioInput[]
    createMany?: AtividadeCreateManyUsuarioInputEnvelope
    connect?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
  }

  export type NotasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<NotasCreateWithoutUsuarioInput, NotasUncheckedCreateWithoutUsuarioInput> | NotasCreateWithoutUsuarioInput[] | NotasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotasCreateOrConnectWithoutUsuarioInput | NotasCreateOrConnectWithoutUsuarioInput[]
    createMany?: NotasCreateManyUsuarioInputEnvelope
    connect?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ItemListaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ItemListaCreateWithoutUsuarioInput, ItemListaUncheckedCreateWithoutUsuarioInput> | ItemListaCreateWithoutUsuarioInput[] | ItemListaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ItemListaCreateOrConnectWithoutUsuarioInput | ItemListaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ItemListaUpsertWithWhereUniqueWithoutUsuarioInput | ItemListaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ItemListaCreateManyUsuarioInputEnvelope
    set?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    disconnect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    delete?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    connect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    update?: ItemListaUpdateWithWhereUniqueWithoutUsuarioInput | ItemListaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ItemListaUpdateManyWithWhereWithoutUsuarioInput | ItemListaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ItemListaScalarWhereInput | ItemListaScalarWhereInput[]
  }

  export type ListasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ListasCreateWithoutUsuarioInput, ListasUncheckedCreateWithoutUsuarioInput> | ListasCreateWithoutUsuarioInput[] | ListasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ListasCreateOrConnectWithoutUsuarioInput | ListasCreateOrConnectWithoutUsuarioInput[]
    upsert?: ListasUpsertWithWhereUniqueWithoutUsuarioInput | ListasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ListasCreateManyUsuarioInputEnvelope
    set?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
    disconnect?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
    delete?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
    connect?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
    update?: ListasUpdateWithWhereUniqueWithoutUsuarioInput | ListasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ListasUpdateManyWithWhereWithoutUsuarioInput | ListasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ListasScalarWhereInput | ListasScalarWhereInput[]
  }

  export type AgendaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AgendaCreateWithoutUsuarioInput, AgendaUncheckedCreateWithoutUsuarioInput> | AgendaCreateWithoutUsuarioInput[] | AgendaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AgendaCreateOrConnectWithoutUsuarioInput | AgendaCreateOrConnectWithoutUsuarioInput[]
    upsert?: AgendaUpsertWithWhereUniqueWithoutUsuarioInput | AgendaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AgendaCreateManyUsuarioInputEnvelope
    set?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    disconnect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    delete?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    connect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    update?: AgendaUpdateWithWhereUniqueWithoutUsuarioInput | AgendaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AgendaUpdateManyWithWhereWithoutUsuarioInput | AgendaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AgendaScalarWhereInput | AgendaScalarWhereInput[]
  }

  export type AtividadeUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AtividadeCreateWithoutUsuarioInput, AtividadeUncheckedCreateWithoutUsuarioInput> | AtividadeCreateWithoutUsuarioInput[] | AtividadeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AtividadeCreateOrConnectWithoutUsuarioInput | AtividadeCreateOrConnectWithoutUsuarioInput[]
    upsert?: AtividadeUpsertWithWhereUniqueWithoutUsuarioInput | AtividadeUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AtividadeCreateManyUsuarioInputEnvelope
    set?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
    disconnect?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
    delete?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
    connect?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
    update?: AtividadeUpdateWithWhereUniqueWithoutUsuarioInput | AtividadeUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AtividadeUpdateManyWithWhereWithoutUsuarioInput | AtividadeUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AtividadeScalarWhereInput | AtividadeScalarWhereInput[]
  }

  export type NotasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<NotasCreateWithoutUsuarioInput, NotasUncheckedCreateWithoutUsuarioInput> | NotasCreateWithoutUsuarioInput[] | NotasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotasCreateOrConnectWithoutUsuarioInput | NotasCreateOrConnectWithoutUsuarioInput[]
    upsert?: NotasUpsertWithWhereUniqueWithoutUsuarioInput | NotasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: NotasCreateManyUsuarioInputEnvelope
    set?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
    disconnect?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
    delete?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
    connect?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
    update?: NotasUpdateWithWhereUniqueWithoutUsuarioInput | NotasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: NotasUpdateManyWithWhereWithoutUsuarioInput | NotasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: NotasScalarWhereInput | NotasScalarWhereInput[]
  }

  export type ItemListaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ItemListaCreateWithoutUsuarioInput, ItemListaUncheckedCreateWithoutUsuarioInput> | ItemListaCreateWithoutUsuarioInput[] | ItemListaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ItemListaCreateOrConnectWithoutUsuarioInput | ItemListaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ItemListaUpsertWithWhereUniqueWithoutUsuarioInput | ItemListaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ItemListaCreateManyUsuarioInputEnvelope
    set?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    disconnect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    delete?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    connect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    update?: ItemListaUpdateWithWhereUniqueWithoutUsuarioInput | ItemListaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ItemListaUpdateManyWithWhereWithoutUsuarioInput | ItemListaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ItemListaScalarWhereInput | ItemListaScalarWhereInput[]
  }

  export type ListasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ListasCreateWithoutUsuarioInput, ListasUncheckedCreateWithoutUsuarioInput> | ListasCreateWithoutUsuarioInput[] | ListasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ListasCreateOrConnectWithoutUsuarioInput | ListasCreateOrConnectWithoutUsuarioInput[]
    upsert?: ListasUpsertWithWhereUniqueWithoutUsuarioInput | ListasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ListasCreateManyUsuarioInputEnvelope
    set?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
    disconnect?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
    delete?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
    connect?: ListasWhereUniqueInput | ListasWhereUniqueInput[]
    update?: ListasUpdateWithWhereUniqueWithoutUsuarioInput | ListasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ListasUpdateManyWithWhereWithoutUsuarioInput | ListasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ListasScalarWhereInput | ListasScalarWhereInput[]
  }

  export type AgendaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AgendaCreateWithoutUsuarioInput, AgendaUncheckedCreateWithoutUsuarioInput> | AgendaCreateWithoutUsuarioInput[] | AgendaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AgendaCreateOrConnectWithoutUsuarioInput | AgendaCreateOrConnectWithoutUsuarioInput[]
    upsert?: AgendaUpsertWithWhereUniqueWithoutUsuarioInput | AgendaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AgendaCreateManyUsuarioInputEnvelope
    set?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    disconnect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    delete?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    connect?: AgendaWhereUniqueInput | AgendaWhereUniqueInput[]
    update?: AgendaUpdateWithWhereUniqueWithoutUsuarioInput | AgendaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AgendaUpdateManyWithWhereWithoutUsuarioInput | AgendaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AgendaScalarWhereInput | AgendaScalarWhereInput[]
  }

  export type AtividadeUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AtividadeCreateWithoutUsuarioInput, AtividadeUncheckedCreateWithoutUsuarioInput> | AtividadeCreateWithoutUsuarioInput[] | AtividadeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AtividadeCreateOrConnectWithoutUsuarioInput | AtividadeCreateOrConnectWithoutUsuarioInput[]
    upsert?: AtividadeUpsertWithWhereUniqueWithoutUsuarioInput | AtividadeUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AtividadeCreateManyUsuarioInputEnvelope
    set?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
    disconnect?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
    delete?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
    connect?: AtividadeWhereUniqueInput | AtividadeWhereUniqueInput[]
    update?: AtividadeUpdateWithWhereUniqueWithoutUsuarioInput | AtividadeUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AtividadeUpdateManyWithWhereWithoutUsuarioInput | AtividadeUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AtividadeScalarWhereInput | AtividadeScalarWhereInput[]
  }

  export type NotasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<NotasCreateWithoutUsuarioInput, NotasUncheckedCreateWithoutUsuarioInput> | NotasCreateWithoutUsuarioInput[] | NotasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotasCreateOrConnectWithoutUsuarioInput | NotasCreateOrConnectWithoutUsuarioInput[]
    upsert?: NotasUpsertWithWhereUniqueWithoutUsuarioInput | NotasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: NotasCreateManyUsuarioInputEnvelope
    set?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
    disconnect?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
    delete?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
    connect?: NotasWhereUniqueInput | NotasWhereUniqueInput[]
    update?: NotasUpdateWithWhereUniqueWithoutUsuarioInput | NotasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: NotasUpdateManyWithWhereWithoutUsuarioInput | NotasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: NotasScalarWhereInput | NotasScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutAtividadeInput = {
    create?: XOR<UsuarioCreateWithoutAtividadeInput, UsuarioUncheckedCreateWithoutAtividadeInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAtividadeInput
    connect?: UsuarioWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsuarioUpdateOneRequiredWithoutAtividadeNestedInput = {
    create?: XOR<UsuarioCreateWithoutAtividadeInput, UsuarioUncheckedCreateWithoutAtividadeInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAtividadeInput
    upsert?: UsuarioUpsertWithoutAtividadeInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutAtividadeInput, UsuarioUpdateWithoutAtividadeInput>, UsuarioUncheckedUpdateWithoutAtividadeInput>
  }

  export type UsuarioCreateNestedOneWithoutListaInput = {
    create?: XOR<UsuarioCreateWithoutListaInput, UsuarioUncheckedCreateWithoutListaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutListaInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ItemListaCreateNestedManyWithoutListaInput = {
    create?: XOR<ItemListaCreateWithoutListaInput, ItemListaUncheckedCreateWithoutListaInput> | ItemListaCreateWithoutListaInput[] | ItemListaUncheckedCreateWithoutListaInput[]
    connectOrCreate?: ItemListaCreateOrConnectWithoutListaInput | ItemListaCreateOrConnectWithoutListaInput[]
    createMany?: ItemListaCreateManyListaInputEnvelope
    connect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
  }

  export type ItemListaUncheckedCreateNestedManyWithoutListaInput = {
    create?: XOR<ItemListaCreateWithoutListaInput, ItemListaUncheckedCreateWithoutListaInput> | ItemListaCreateWithoutListaInput[] | ItemListaUncheckedCreateWithoutListaInput[]
    connectOrCreate?: ItemListaCreateOrConnectWithoutListaInput | ItemListaCreateOrConnectWithoutListaInput[]
    createMany?: ItemListaCreateManyListaInputEnvelope
    connect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutListaNestedInput = {
    create?: XOR<UsuarioCreateWithoutListaInput, UsuarioUncheckedCreateWithoutListaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutListaInput
    upsert?: UsuarioUpsertWithoutListaInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutListaInput, UsuarioUpdateWithoutListaInput>, UsuarioUncheckedUpdateWithoutListaInput>
  }

  export type ItemListaUpdateManyWithoutListaNestedInput = {
    create?: XOR<ItemListaCreateWithoutListaInput, ItemListaUncheckedCreateWithoutListaInput> | ItemListaCreateWithoutListaInput[] | ItemListaUncheckedCreateWithoutListaInput[]
    connectOrCreate?: ItemListaCreateOrConnectWithoutListaInput | ItemListaCreateOrConnectWithoutListaInput[]
    upsert?: ItemListaUpsertWithWhereUniqueWithoutListaInput | ItemListaUpsertWithWhereUniqueWithoutListaInput[]
    createMany?: ItemListaCreateManyListaInputEnvelope
    set?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    disconnect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    delete?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    connect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    update?: ItemListaUpdateWithWhereUniqueWithoutListaInput | ItemListaUpdateWithWhereUniqueWithoutListaInput[]
    updateMany?: ItemListaUpdateManyWithWhereWithoutListaInput | ItemListaUpdateManyWithWhereWithoutListaInput[]
    deleteMany?: ItemListaScalarWhereInput | ItemListaScalarWhereInput[]
  }

  export type ItemListaUncheckedUpdateManyWithoutListaNestedInput = {
    create?: XOR<ItemListaCreateWithoutListaInput, ItemListaUncheckedCreateWithoutListaInput> | ItemListaCreateWithoutListaInput[] | ItemListaUncheckedCreateWithoutListaInput[]
    connectOrCreate?: ItemListaCreateOrConnectWithoutListaInput | ItemListaCreateOrConnectWithoutListaInput[]
    upsert?: ItemListaUpsertWithWhereUniqueWithoutListaInput | ItemListaUpsertWithWhereUniqueWithoutListaInput[]
    createMany?: ItemListaCreateManyListaInputEnvelope
    set?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    disconnect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    delete?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    connect?: ItemListaWhereUniqueInput | ItemListaWhereUniqueInput[]
    update?: ItemListaUpdateWithWhereUniqueWithoutListaInput | ItemListaUpdateWithWhereUniqueWithoutListaInput[]
    updateMany?: ItemListaUpdateManyWithWhereWithoutListaInput | ItemListaUpdateManyWithWhereWithoutListaInput[]
    deleteMany?: ItemListaScalarWhereInput | ItemListaScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutNotasInput = {
    create?: XOR<UsuarioCreateWithoutNotasInput, UsuarioUncheckedCreateWithoutNotasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutNotasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutNotasNestedInput = {
    create?: XOR<UsuarioCreateWithoutNotasInput, UsuarioUncheckedCreateWithoutNotasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutNotasInput
    upsert?: UsuarioUpsertWithoutNotasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutNotasInput, UsuarioUpdateWithoutNotasInput>, UsuarioUncheckedUpdateWithoutNotasInput>
  }

  export type ListasCreateNestedOneWithoutItensInput = {
    create?: XOR<ListasCreateWithoutItensInput, ListasUncheckedCreateWithoutItensInput>
    connectOrCreate?: ListasCreateOrConnectWithoutItensInput
    connect?: ListasWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutItenslistaInput = {
    create?: XOR<UsuarioCreateWithoutItenslistaInput, UsuarioUncheckedCreateWithoutItenslistaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutItenslistaInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ListasUpdateOneRequiredWithoutItensNestedInput = {
    create?: XOR<ListasCreateWithoutItensInput, ListasUncheckedCreateWithoutItensInput>
    connectOrCreate?: ListasCreateOrConnectWithoutItensInput
    upsert?: ListasUpsertWithoutItensInput
    connect?: ListasWhereUniqueInput
    update?: XOR<XOR<ListasUpdateToOneWithWhereWithoutItensInput, ListasUpdateWithoutItensInput>, ListasUncheckedUpdateWithoutItensInput>
  }

  export type UsuarioUpdateOneRequiredWithoutItenslistaNestedInput = {
    create?: XOR<UsuarioCreateWithoutItenslistaInput, UsuarioUncheckedCreateWithoutItenslistaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutItenslistaInput
    upsert?: UsuarioUpsertWithoutItenslistaInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutItenslistaInput, UsuarioUpdateWithoutItenslistaInput>, UsuarioUncheckedUpdateWithoutItenslistaInput>
  }

  export type UsuarioCreateNestedOneWithoutAgendaInput = {
    create?: XOR<UsuarioCreateWithoutAgendaInput, UsuarioUncheckedCreateWithoutAgendaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAgendaInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutAgendaNestedInput = {
    create?: XOR<UsuarioCreateWithoutAgendaInput, UsuarioUncheckedCreateWithoutAgendaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAgendaInput
    upsert?: UsuarioUpsertWithoutAgendaInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutAgendaInput, UsuarioUpdateWithoutAgendaInput>, UsuarioUncheckedUpdateWithoutAgendaInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ItemListaCreateWithoutUsuarioInput = {
    descricao: string
    concluido?: boolean
    lista: ListasCreateNestedOneWithoutItensInput
  }

  export type ItemListaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    descricao: string
    concluido?: boolean
    listaId: number
  }

  export type ItemListaCreateOrConnectWithoutUsuarioInput = {
    where: ItemListaWhereUniqueInput
    create: XOR<ItemListaCreateWithoutUsuarioInput, ItemListaUncheckedCreateWithoutUsuarioInput>
  }

  export type ItemListaCreateManyUsuarioInputEnvelope = {
    data: ItemListaCreateManyUsuarioInput | ItemListaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ListasCreateWithoutUsuarioInput = {
    titulo: string
    itens?: ItemListaCreateNestedManyWithoutListaInput
  }

  export type ListasUncheckedCreateWithoutUsuarioInput = {
    id?: number
    titulo: string
    itens?: ItemListaUncheckedCreateNestedManyWithoutListaInput
  }

  export type ListasCreateOrConnectWithoutUsuarioInput = {
    where: ListasWhereUniqueInput
    create: XOR<ListasCreateWithoutUsuarioInput, ListasUncheckedCreateWithoutUsuarioInput>
  }

  export type ListasCreateManyUsuarioInputEnvelope = {
    data: ListasCreateManyUsuarioInput | ListasCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type AgendaCreateWithoutUsuarioInput = {
    titulo: string
    descricao?: string | null
    data: Date | string
  }

  export type AgendaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    titulo: string
    descricao?: string | null
    data: Date | string
  }

  export type AgendaCreateOrConnectWithoutUsuarioInput = {
    where: AgendaWhereUniqueInput
    create: XOR<AgendaCreateWithoutUsuarioInput, AgendaUncheckedCreateWithoutUsuarioInput>
  }

  export type AgendaCreateManyUsuarioInputEnvelope = {
    data: AgendaCreateManyUsuarioInput | AgendaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type AtividadeCreateWithoutUsuarioInput = {
    titulo: string
    descricao?: string | null
    data?: Date | string | null
    concluido?: boolean
  }

  export type AtividadeUncheckedCreateWithoutUsuarioInput = {
    id?: number
    titulo: string
    descricao?: string | null
    data?: Date | string | null
    concluido?: boolean
  }

  export type AtividadeCreateOrConnectWithoutUsuarioInput = {
    where: AtividadeWhereUniqueInput
    create: XOR<AtividadeCreateWithoutUsuarioInput, AtividadeUncheckedCreateWithoutUsuarioInput>
  }

  export type AtividadeCreateManyUsuarioInputEnvelope = {
    data: AtividadeCreateManyUsuarioInput | AtividadeCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type NotasCreateWithoutUsuarioInput = {
    titulo: string
    descricao: string
  }

  export type NotasUncheckedCreateWithoutUsuarioInput = {
    id?: number
    titulo: string
    descricao: string
  }

  export type NotasCreateOrConnectWithoutUsuarioInput = {
    where: NotasWhereUniqueInput
    create: XOR<NotasCreateWithoutUsuarioInput, NotasUncheckedCreateWithoutUsuarioInput>
  }

  export type NotasCreateManyUsuarioInputEnvelope = {
    data: NotasCreateManyUsuarioInput | NotasCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ItemListaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ItemListaWhereUniqueInput
    update: XOR<ItemListaUpdateWithoutUsuarioInput, ItemListaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ItemListaCreateWithoutUsuarioInput, ItemListaUncheckedCreateWithoutUsuarioInput>
  }

  export type ItemListaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ItemListaWhereUniqueInput
    data: XOR<ItemListaUpdateWithoutUsuarioInput, ItemListaUncheckedUpdateWithoutUsuarioInput>
  }

  export type ItemListaUpdateManyWithWhereWithoutUsuarioInput = {
    where: ItemListaScalarWhereInput
    data: XOR<ItemListaUpdateManyMutationInput, ItemListaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ItemListaScalarWhereInput = {
    AND?: ItemListaScalarWhereInput | ItemListaScalarWhereInput[]
    OR?: ItemListaScalarWhereInput[]
    NOT?: ItemListaScalarWhereInput | ItemListaScalarWhereInput[]
    id?: IntFilter<"ItemLista"> | number
    descricao?: StringFilter<"ItemLista"> | string
    usuarioId?: IntFilter<"ItemLista"> | number
    concluido?: BoolFilter<"ItemLista"> | boolean
    listaId?: IntFilter<"ItemLista"> | number
  }

  export type ListasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ListasWhereUniqueInput
    update: XOR<ListasUpdateWithoutUsuarioInput, ListasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ListasCreateWithoutUsuarioInput, ListasUncheckedCreateWithoutUsuarioInput>
  }

  export type ListasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ListasWhereUniqueInput
    data: XOR<ListasUpdateWithoutUsuarioInput, ListasUncheckedUpdateWithoutUsuarioInput>
  }

  export type ListasUpdateManyWithWhereWithoutUsuarioInput = {
    where: ListasScalarWhereInput
    data: XOR<ListasUpdateManyMutationInput, ListasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ListasScalarWhereInput = {
    AND?: ListasScalarWhereInput | ListasScalarWhereInput[]
    OR?: ListasScalarWhereInput[]
    NOT?: ListasScalarWhereInput | ListasScalarWhereInput[]
    id?: IntFilter<"Listas"> | number
    titulo?: StringFilter<"Listas"> | string
    usuarioId?: IntFilter<"Listas"> | number
  }

  export type AgendaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: AgendaWhereUniqueInput
    update: XOR<AgendaUpdateWithoutUsuarioInput, AgendaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<AgendaCreateWithoutUsuarioInput, AgendaUncheckedCreateWithoutUsuarioInput>
  }

  export type AgendaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: AgendaWhereUniqueInput
    data: XOR<AgendaUpdateWithoutUsuarioInput, AgendaUncheckedUpdateWithoutUsuarioInput>
  }

  export type AgendaUpdateManyWithWhereWithoutUsuarioInput = {
    where: AgendaScalarWhereInput
    data: XOR<AgendaUpdateManyMutationInput, AgendaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type AgendaScalarWhereInput = {
    AND?: AgendaScalarWhereInput | AgendaScalarWhereInput[]
    OR?: AgendaScalarWhereInput[]
    NOT?: AgendaScalarWhereInput | AgendaScalarWhereInput[]
    id?: IntFilter<"Agenda"> | number
    titulo?: StringFilter<"Agenda"> | string
    descricao?: StringNullableFilter<"Agenda"> | string | null
    data?: DateTimeFilter<"Agenda"> | Date | string
    usuarioId?: IntFilter<"Agenda"> | number
  }

  export type AtividadeUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: AtividadeWhereUniqueInput
    update: XOR<AtividadeUpdateWithoutUsuarioInput, AtividadeUncheckedUpdateWithoutUsuarioInput>
    create: XOR<AtividadeCreateWithoutUsuarioInput, AtividadeUncheckedCreateWithoutUsuarioInput>
  }

  export type AtividadeUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: AtividadeWhereUniqueInput
    data: XOR<AtividadeUpdateWithoutUsuarioInput, AtividadeUncheckedUpdateWithoutUsuarioInput>
  }

  export type AtividadeUpdateManyWithWhereWithoutUsuarioInput = {
    where: AtividadeScalarWhereInput
    data: XOR<AtividadeUpdateManyMutationInput, AtividadeUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type AtividadeScalarWhereInput = {
    AND?: AtividadeScalarWhereInput | AtividadeScalarWhereInput[]
    OR?: AtividadeScalarWhereInput[]
    NOT?: AtividadeScalarWhereInput | AtividadeScalarWhereInput[]
    id?: IntFilter<"Atividade"> | number
    titulo?: StringFilter<"Atividade"> | string
    descricao?: StringNullableFilter<"Atividade"> | string | null
    usuarioId?: IntFilter<"Atividade"> | number
    data?: DateTimeNullableFilter<"Atividade"> | Date | string | null
    concluido?: BoolFilter<"Atividade"> | boolean
  }

  export type NotasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: NotasWhereUniqueInput
    update: XOR<NotasUpdateWithoutUsuarioInput, NotasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<NotasCreateWithoutUsuarioInput, NotasUncheckedCreateWithoutUsuarioInput>
  }

  export type NotasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: NotasWhereUniqueInput
    data: XOR<NotasUpdateWithoutUsuarioInput, NotasUncheckedUpdateWithoutUsuarioInput>
  }

  export type NotasUpdateManyWithWhereWithoutUsuarioInput = {
    where: NotasScalarWhereInput
    data: XOR<NotasUpdateManyMutationInput, NotasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type NotasScalarWhereInput = {
    AND?: NotasScalarWhereInput | NotasScalarWhereInput[]
    OR?: NotasScalarWhereInput[]
    NOT?: NotasScalarWhereInput | NotasScalarWhereInput[]
    id?: IntFilter<"Notas"> | number
    titulo?: StringFilter<"Notas"> | string
    descricao?: StringFilter<"Notas"> | string
    usuarioId?: IntFilter<"Notas"> | number
  }

  export type UsuarioCreateWithoutAtividadeInput = {
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaCreateNestedManyWithoutUsuarioInput
    lista?: ListasCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaCreateNestedManyWithoutUsuarioInput
    notas?: NotasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutAtividadeInput = {
    id?: number
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaUncheckedCreateNestedManyWithoutUsuarioInput
    lista?: ListasUncheckedCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaUncheckedCreateNestedManyWithoutUsuarioInput
    notas?: NotasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutAtividadeInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutAtividadeInput, UsuarioUncheckedCreateWithoutAtividadeInput>
  }

  export type UsuarioUpsertWithoutAtividadeInput = {
    update: XOR<UsuarioUpdateWithoutAtividadeInput, UsuarioUncheckedUpdateWithoutAtividadeInput>
    create: XOR<UsuarioCreateWithoutAtividadeInput, UsuarioUncheckedCreateWithoutAtividadeInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutAtividadeInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutAtividadeInput, UsuarioUncheckedUpdateWithoutAtividadeInput>
  }

  export type UsuarioUpdateWithoutAtividadeInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUpdateManyWithoutUsuarioNestedInput
    lista?: ListasUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutAtividadeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUncheckedUpdateManyWithoutUsuarioNestedInput
    lista?: ListasUncheckedUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUncheckedUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutListaInput = {
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeCreateNestedManyWithoutUsuarioInput
    notas?: NotasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutListaInput = {
    id?: number
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaUncheckedCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaUncheckedCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeUncheckedCreateNestedManyWithoutUsuarioInput
    notas?: NotasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutListaInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutListaInput, UsuarioUncheckedCreateWithoutListaInput>
  }

  export type ItemListaCreateWithoutListaInput = {
    descricao: string
    concluido?: boolean
    usuario: UsuarioCreateNestedOneWithoutItenslistaInput
  }

  export type ItemListaUncheckedCreateWithoutListaInput = {
    id?: number
    descricao: string
    usuarioId: number
    concluido?: boolean
  }

  export type ItemListaCreateOrConnectWithoutListaInput = {
    where: ItemListaWhereUniqueInput
    create: XOR<ItemListaCreateWithoutListaInput, ItemListaUncheckedCreateWithoutListaInput>
  }

  export type ItemListaCreateManyListaInputEnvelope = {
    data: ItemListaCreateManyListaInput | ItemListaCreateManyListaInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutListaInput = {
    update: XOR<UsuarioUpdateWithoutListaInput, UsuarioUncheckedUpdateWithoutListaInput>
    create: XOR<UsuarioCreateWithoutListaInput, UsuarioUncheckedCreateWithoutListaInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutListaInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutListaInput, UsuarioUncheckedUpdateWithoutListaInput>
  }

  export type UsuarioUpdateWithoutListaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutListaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUncheckedUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUncheckedUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUncheckedUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ItemListaUpsertWithWhereUniqueWithoutListaInput = {
    where: ItemListaWhereUniqueInput
    update: XOR<ItemListaUpdateWithoutListaInput, ItemListaUncheckedUpdateWithoutListaInput>
    create: XOR<ItemListaCreateWithoutListaInput, ItemListaUncheckedCreateWithoutListaInput>
  }

  export type ItemListaUpdateWithWhereUniqueWithoutListaInput = {
    where: ItemListaWhereUniqueInput
    data: XOR<ItemListaUpdateWithoutListaInput, ItemListaUncheckedUpdateWithoutListaInput>
  }

  export type ItemListaUpdateManyWithWhereWithoutListaInput = {
    where: ItemListaScalarWhereInput
    data: XOR<ItemListaUpdateManyMutationInput, ItemListaUncheckedUpdateManyWithoutListaInput>
  }

  export type UsuarioCreateWithoutNotasInput = {
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaCreateNestedManyWithoutUsuarioInput
    lista?: ListasCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutNotasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaUncheckedCreateNestedManyWithoutUsuarioInput
    lista?: ListasUncheckedCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaUncheckedCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutNotasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutNotasInput, UsuarioUncheckedCreateWithoutNotasInput>
  }

  export type UsuarioUpsertWithoutNotasInput = {
    update: XOR<UsuarioUpdateWithoutNotasInput, UsuarioUncheckedUpdateWithoutNotasInput>
    create: XOR<UsuarioCreateWithoutNotasInput, UsuarioUncheckedCreateWithoutNotasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutNotasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutNotasInput, UsuarioUncheckedUpdateWithoutNotasInput>
  }

  export type UsuarioUpdateWithoutNotasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUpdateManyWithoutUsuarioNestedInput
    lista?: ListasUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutNotasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUncheckedUpdateManyWithoutUsuarioNestedInput
    lista?: ListasUncheckedUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUncheckedUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ListasCreateWithoutItensInput = {
    titulo: string
    usuario: UsuarioCreateNestedOneWithoutListaInput
  }

  export type ListasUncheckedCreateWithoutItensInput = {
    id?: number
    titulo: string
    usuarioId: number
  }

  export type ListasCreateOrConnectWithoutItensInput = {
    where: ListasWhereUniqueInput
    create: XOR<ListasCreateWithoutItensInput, ListasUncheckedCreateWithoutItensInput>
  }

  export type UsuarioCreateWithoutItenslistaInput = {
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    lista?: ListasCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeCreateNestedManyWithoutUsuarioInput
    notas?: NotasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutItenslistaInput = {
    id?: number
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    lista?: ListasUncheckedCreateNestedManyWithoutUsuarioInput
    agenda?: AgendaUncheckedCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeUncheckedCreateNestedManyWithoutUsuarioInput
    notas?: NotasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutItenslistaInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutItenslistaInput, UsuarioUncheckedCreateWithoutItenslistaInput>
  }

  export type ListasUpsertWithoutItensInput = {
    update: XOR<ListasUpdateWithoutItensInput, ListasUncheckedUpdateWithoutItensInput>
    create: XOR<ListasCreateWithoutItensInput, ListasUncheckedCreateWithoutItensInput>
    where?: ListasWhereInput
  }

  export type ListasUpdateToOneWithWhereWithoutItensInput = {
    where?: ListasWhereInput
    data: XOR<ListasUpdateWithoutItensInput, ListasUncheckedUpdateWithoutItensInput>
  }

  export type ListasUpdateWithoutItensInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutListaNestedInput
  }

  export type ListasUncheckedUpdateWithoutItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioUpsertWithoutItenslistaInput = {
    update: XOR<UsuarioUpdateWithoutItenslistaInput, UsuarioUncheckedUpdateWithoutItenslistaInput>
    create: XOR<UsuarioCreateWithoutItenslistaInput, UsuarioUncheckedCreateWithoutItenslistaInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutItenslistaInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutItenslistaInput, UsuarioUncheckedUpdateWithoutItenslistaInput>
  }

  export type UsuarioUpdateWithoutItenslistaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lista?: ListasUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutItenslistaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lista?: ListasUncheckedUpdateManyWithoutUsuarioNestedInput
    agenda?: AgendaUncheckedUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUncheckedUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutAgendaInput = {
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaCreateNestedManyWithoutUsuarioInput
    lista?: ListasCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeCreateNestedManyWithoutUsuarioInput
    notas?: NotasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutAgendaInput = {
    id?: number
    nome: string
    email: string
    senha: string
    nascimento: Date | string
    pontuacao: number
    criadoEm?: Date | string | null
    itenslista?: ItemListaUncheckedCreateNestedManyWithoutUsuarioInput
    lista?: ListasUncheckedCreateNestedManyWithoutUsuarioInput
    atividade?: AtividadeUncheckedCreateNestedManyWithoutUsuarioInput
    notas?: NotasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutAgendaInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutAgendaInput, UsuarioUncheckedCreateWithoutAgendaInput>
  }

  export type UsuarioUpsertWithoutAgendaInput = {
    update: XOR<UsuarioUpdateWithoutAgendaInput, UsuarioUncheckedUpdateWithoutAgendaInput>
    create: XOR<UsuarioCreateWithoutAgendaInput, UsuarioUncheckedCreateWithoutAgendaInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutAgendaInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutAgendaInput, UsuarioUncheckedUpdateWithoutAgendaInput>
  }

  export type UsuarioUpdateWithoutAgendaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUpdateManyWithoutUsuarioNestedInput
    lista?: ListasUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutAgendaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    criadoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itenslista?: ItemListaUncheckedUpdateManyWithoutUsuarioNestedInput
    lista?: ListasUncheckedUpdateManyWithoutUsuarioNestedInput
    atividade?: AtividadeUncheckedUpdateManyWithoutUsuarioNestedInput
    notas?: NotasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ItemListaCreateManyUsuarioInput = {
    id?: number
    descricao: string
    concluido?: boolean
    listaId: number
  }

  export type ListasCreateManyUsuarioInput = {
    id?: number
    titulo: string
  }

  export type AgendaCreateManyUsuarioInput = {
    id?: number
    titulo: string
    descricao?: string | null
    data: Date | string
  }

  export type AtividadeCreateManyUsuarioInput = {
    id?: number
    titulo: string
    descricao?: string | null
    data?: Date | string | null
    concluido?: boolean
  }

  export type NotasCreateManyUsuarioInput = {
    id?: number
    titulo: string
    descricao: string
  }

  export type ItemListaUpdateWithoutUsuarioInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    lista?: ListasUpdateOneRequiredWithoutItensNestedInput
  }

  export type ItemListaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    listaId?: IntFieldUpdateOperationsInput | number
  }

  export type ItemListaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    listaId?: IntFieldUpdateOperationsInput | number
  }

  export type ListasUpdateWithoutUsuarioInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    itens?: ItemListaUpdateManyWithoutListaNestedInput
  }

  export type ListasUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    itens?: ItemListaUncheckedUpdateManyWithoutListaNestedInput
  }

  export type ListasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
  }

  export type AgendaUpdateWithoutUsuarioInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AtividadeUpdateWithoutUsuarioInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concluido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AtividadeUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concluido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AtividadeUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concluido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotasUpdateWithoutUsuarioInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type NotasUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type NotasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type ItemListaCreateManyListaInput = {
    id?: number
    descricao: string
    usuarioId: number
    concluido?: boolean
  }

  export type ItemListaUpdateWithoutListaInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutItenslistaNestedInput
  }

  export type ItemListaUncheckedUpdateWithoutListaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    concluido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemListaUncheckedUpdateManyWithoutListaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    concluido?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ListasCountOutputTypeDefaultArgs instead
     */
    export type ListasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ListasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AtividadeDefaultArgs instead
     */
    export type AtividadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AtividadeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ListasDefaultArgs instead
     */
    export type ListasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ListasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotasDefaultArgs instead
     */
    export type NotasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemListaDefaultArgs instead
     */
    export type ItemListaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemListaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgendaDefaultArgs instead
     */
    export type AgendaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgendaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}